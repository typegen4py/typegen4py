import typing as t
from .datastructures import Authorization as Authorization, CallbackDict as CallbackDict, CombinedMultiDict as CombinedMultiDict, EnvironHeaders as EnvironHeaders, FileMultiDict as FileMultiDict, Headers as Headers, MultiDict as MultiDict
from .http import dump_cookie as dump_cookie, dump_options_header as dump_options_header, parse_options_header as parse_options_header
from .sansio.multipart import Data as Data, Epilogue as Epilogue, Field as Field, File as File, MultipartEncoder as MultipartEncoder, Preamble as Preamble
from .urls import iri_to_uri as iri_to_uri, url_encode as url_encode, url_fix as url_fix, url_parse as url_parse, url_unparse as url_unparse, url_unquote as url_unquote
from .utils import get_content_type as get_content_type
from .wrappers.request import Request as Request
from .wrappers.response import Response as Response
from .wsgi import ClosingIterator as ClosingIterator, get_current_url as get_current_url
from datetime import datetime, timedelta
from http.cookiejar import CookieJar
from typing import Any
from wsgiref.types import WSGIApplication as WSGIApplication, WSGIEnvironment as WSGIEnvironment

def stream_encode_multipart(data: t.Mapping[str, t.Any], use_tempfile: bool=..., threshold: int=..., boundary: t.Optional[str]=..., charset: str=...) -> t.Tuple[t.BinaryIO, int, str]: ...
def encode_multipart(values: t.Mapping[str, t.Any], boundary: t.Optional[str]=..., charset: str=...) -> t.Tuple[str, bytes]: ...

class _TestCookieHeaders:
    headers: Any = ...
    def __init__(self, headers: t.Union[Headers, t.List[t.Tuple[str, str]]]) -> None: ...
    def getheaders(self, name: str) -> t.Iterable[str]: ...
    def get_all(self, name: str, default: t.Optional[t.Iterable[str]]=...) -> t.Iterable[str]: ...

class _TestCookieResponse:
    headers: Any = ...
    def __init__(self, headers: t.Union[Headers, t.List[t.Tuple[str, str]]]) -> None: ...
    def info(self) -> _TestCookieHeaders: ...

class _TestCookieJar(CookieJar):
    def inject_wsgi(self, environ: WSGIEnvironment) -> None: ...
    def extract_wsgi(self, environ: WSGIEnvironment, headers: t.Union[Headers, t.List[t.Tuple[str, str]]]) -> None: ...

class EnvironBuilder:
    server_protocol: str = ...
    wsgi_version: Any = ...
    request_class: Any = ...
    json_dumps: Any = ...
    charset: Any = ...
    path: Any = ...
    request_uri: Any = ...
    method: Any = ...
    headers: Any = ...
    errors_stream: Any = ...
    multithread: Any = ...
    multiprocess: Any = ...
    run_once: Any = ...
    environ_base: Any = ...
    environ_overrides: Any = ...
    closed: bool = ...
    def __init__(self, path: str=..., base_url: t.Optional[str]=..., query_string: t.Optional[t.Union[t.Mapping[str, str], str]]=..., method: str=..., input_stream: t.Optional[t.BinaryIO]=..., content_type: t.Optional[str]=..., content_length: t.Optional[int]=..., errors_stream: t.Optional[t.TextIO]=..., multithread: bool=..., multiprocess: bool=..., run_once: bool=..., headers: t.Optional[t.Union[Headers, t.Iterable[t.Tuple[str, str]]]]=..., data: t.Optional[t.Union[t.BinaryIO, str, bytes, t.Mapping[str, t.Any]]]=..., environ_base: t.Optional[t.Mapping[str, t.Any]]=..., environ_overrides: t.Optional[t.Mapping[str, t.Any]]=..., charset: str=..., mimetype: t.Optional[str]=..., json: t.Optional[t.Mapping[str, t.Any]]=..., auth: t.Optional[t.Union[Authorization, t.Tuple[str, str]]]=...) -> None: ...
    @classmethod
    def from_environ(cls: Any, environ: WSGIEnvironment, **kwargs: Any) -> EnvironBuilder: ...
    @property
    def base_url(self) -> str: ...
    script_root: Any = ...
    host: Any = ...
    url_scheme: Any = ...
    @base_url.setter
    def base_url(self, value: t.Optional[str]) -> None: ...
    @property
    def content_type(self) -> t.Optional[str]: ...
    @content_type.setter
    def content_type(self, value: t.Optional[str]) -> None: ...
    @property
    def mimetype(self) -> t.Optional[str]: ...
    @mimetype.setter
    def mimetype(self, value: str) -> None: ...
    @property
    def mimetype_params(self) -> t.Mapping[str, str]: ...
    @property
    def content_length(self) -> t.Optional[int]: ...
    @content_length.setter
    def content_length(self, value: t.Optional[int]) -> None: ...
    @property
    def form(self) -> MultiDict: ...
    @form.setter
    def form(self, value: MultiDict) -> None: ...
    @property
    def files(self) -> FileMultiDict: ...
    @files.setter
    def files(self, value: FileMultiDict) -> None: ...
    @property
    def input_stream(self) -> t.Optional[t.BinaryIO]: ...
    @input_stream.setter
    def input_stream(self, value: t.Optional[t.BinaryIO]) -> None: ...
    @property
    def query_string(self) -> str: ...
    @query_string.setter
    def query_string(self, value: t.Optional[str]) -> None: ...
    @property
    def args(self) -> MultiDict: ...
    @args.setter
    def args(self, value: t.Optional[MultiDict]) -> None: ...
    @property
    def server_name(self) -> str: ...
    @property
    def server_port(self) -> int: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def get_environ(self) -> WSGIEnvironment: ...
    def get_request(self, cls: t.Optional[t.Type[Request]]=...) -> Request: ...

class ClientRedirectError(Exception): ...

class Client:
    application: Any = ...
    response_wrapper: Any = ...
    cookie_jar: Any = ...
    allow_subdomain_redirects: Any = ...
    def __init__(self, application: WSGIApplication, response_wrapper: t.Optional[t.Type[Response]]=..., use_cookies: bool=..., allow_subdomain_redirects: bool=...) -> None: ...
    def set_cookie(self, server_name: str, key: str, value: str=..., max_age: t.Optional[t.Union[timedelta, int]]=..., expires: t.Optional[t.Union[str, datetime, int, float]]=..., path: str=..., domain: t.Optional[str]=..., secure: bool=..., httponly: bool=..., samesite: t.Optional[str]=..., charset: str=...) -> None: ...
    def delete_cookie(self, server_name: str, key: str, path: str=..., domain: t.Optional[str]=..., secure: bool=..., httponly: bool=..., samesite: t.Optional[str]=...) -> None: ...
    def run_wsgi_app(self, environ: WSGIEnvironment, buffered: bool=...) -> t.Tuple[t.Iterable[bytes], str, Headers]: ...
    def resolve_redirect(self, response: TestResponse, buffered: bool=...) -> TestResponse: ...
    def open(self, *args: Any, as_tuple: bool=..., buffered: bool=..., follow_redirects: bool=..., **kwargs: Any) -> TestResponse: ...
    def get(self, *args: Any, **kw: Any) -> TestResponse: ...
    def post(self, *args: Any, **kw: Any) -> TestResponse: ...
    def put(self, *args: Any, **kw: Any) -> TestResponse: ...
    def delete(self, *args: Any, **kw: Any) -> TestResponse: ...
    def patch(self, *args: Any, **kw: Any) -> TestResponse: ...
    def options(self, *args: Any, **kw: Any) -> TestResponse: ...
    def head(self, *args: Any, **kw: Any) -> TestResponse: ...
    def trace(self, *args: Any, **kw: Any) -> TestResponse: ...

def create_environ(*args: Any, **kwargs: Any) -> WSGIEnvironment: ...
def run_wsgi_app(app: WSGIApplication, environ: WSGIEnvironment, buffered: bool=...) -> t.Tuple[t.Iterable[bytes], str, Headers]: ...

class TestResponse(Response):
    request: Request
    history: t.Tuple[TestResponse, ...]
    def __init__(self, response: t.Iterable[bytes], status: str, headers: Headers, request: Request, history: t.Tuple[TestResponse]=..., **kwargs: Any) -> None: ...
    def __iter__(self) -> t.Iterator: ...
    def __getitem__(self, item: int) -> t.Any: ...
