import typing as t
from ..datastructures import Headers as Headers
from ..http import HTTP_STATUS_CODES as HTTP_STATUS_CODES, dump_cookie as dump_cookie
from ..utils import get_content_type as get_content_type
from datetime import datetime, timedelta
from http import HTTPStatus
from typing import Any
from werkzeug.datastructures import CallbackDict as CallbackDict, ContentRange as ContentRange, ResponseCacheControl as ResponseCacheControl, WWWAuthenticate as WWWAuthenticate
from werkzeug.http import COEP as COEP, COOP as COOP, dump_age as dump_age, dump_csp_header as dump_csp_header, dump_header as dump_header, dump_options_header as dump_options_header, http_date as http_date, parse_age as parse_age, parse_cache_control_header as parse_cache_control_header, parse_content_range_header as parse_content_range_header, parse_csp_header as parse_csp_header, parse_date as parse_date, parse_options_header as parse_options_header, parse_set_header as parse_set_header, parse_www_authenticate_header as parse_www_authenticate_header, quote_etag as quote_etag, unquote_etag as unquote_etag
from werkzeug.utils import header_property as header_property

class Response:
    charset: str = ...
    default_status: int = ...
    default_mimetype: str = ...
    max_cookie_size: int = ...
    headers: Headers
    def __init__(self, status: t.Optional[t.Union[int, str, HTTPStatus]]=..., headers: t.Optional[t.Union[t.Mapping[str, t.Union[str, int, t.Iterable[t.Union[str, int]]]], t.Iterable[t.Tuple[str, t.Union[str, int]]]]]=..., mimetype: t.Optional[str]=..., content_type: t.Optional[str]=...) -> None: ...
    @property
    def status_code(self) -> int: ...
    @status_code.setter
    def status_code(self, code: int) -> None: ...
    @property
    def status(self) -> str: ...
    @status.setter
    def status(self, value: t.Union[str, int, HTTPStatus]) -> None: ...
    def set_cookie(self, key: str, value: str=..., max_age: t.Optional[t.Union[timedelta, int]]=..., expires: t.Optional[t.Union[str, datetime, int, float]]=..., path: t.Optional[str]=..., domain: t.Optional[str]=..., secure: bool=..., httponly: bool=..., samesite: t.Optional[str]=...) -> None: ...
    def delete_cookie(self, key: str, path: str=..., domain: t.Optional[str]=..., secure: bool=..., httponly: bool=..., samesite: t.Optional[str]=...) -> Any: ...
    @property
    def is_json(self) -> bool: ...
    @property
    def mimetype(self) -> t.Optional[str]: ...
    @mimetype.setter
    def mimetype(self, value: str) -> None: ...
    @property
    def mimetype_params(self) -> t.Dict[str, str]: ...
    location: Any = ...
    age: Any = ...
    content_type: Any = ...
    content_length: Any = ...
    content_location: Any = ...
    content_encoding: Any = ...
    content_md5: Any = ...
    date: Any = ...
    expires: Any = ...
    last_modified: Any = ...
    @property
    def retry_after(self) -> t.Optional[datetime]: ...
    @retry_after.setter
    def retry_after(self, value: t.Optional[t.Union[datetime, int, str]]) -> None: ...
    vary: Any = ...
    content_language: Any = ...
    allow: Any = ...
    @property
    def cache_control(self) -> ResponseCacheControl: ...
    def set_etag(self, etag: str, weak: bool=...) -> None: ...
    def get_etag(self) -> t.Union[t.Tuple[str, bool], t.Tuple[None, None]]: ...
    accept_ranges: Any = ...
    @property
    def content_range(self) -> ContentRange: ...
    @content_range.setter
    def content_range(self, value: t.Optional[t.Union[ContentRange, str]]) -> None: ...
    @property
    def www_authenticate(self) -> WWWAuthenticate: ...
    content_security_policy: Any = ...
    content_security_policy_report_only: Any = ...
    @property
    def access_control_allow_credentials(self) -> bool: ...
    @access_control_allow_credentials.setter
    def access_control_allow_credentials(self, value: t.Optional[bool]) -> None: ...
    access_control_allow_headers: Any = ...
    access_control_allow_methods: Any = ...
    access_control_allow_origin: Any = ...
    access_control_expose_headers: Any = ...
    access_control_max_age: Any = ...
    cross_origin_opener_policy: Any = ...
    cross_origin_embedder_policy: Any = ...
