import typing as t
from ..datastructures import EnvironHeaders as EnvironHeaders
from ..http import is_hop_by_hop_header as is_hop_by_hop_header
from ..urls import url_parse as url_parse, url_quote as url_quote
from ..wsgi import get_input_stream as get_input_stream
from typing import Any
from wsgiref.types import StartResponse, WSGIApplication as WSGIApplication, WSGIEnvironment as WSGIEnvironment

class ProxyMiddleware:
    app: Any = ...
    targets: Any = ...
    chunk_size: Any = ...
    timeout: Any = ...
    def __init__(self, app: WSGIApplication, targets: t.Mapping[str, t.Dict[str, t.Any]], chunk_size: int=..., timeout: int=...): ...
    def proxy_to(self, opts: t.Dict[str, t.Any], path: str, prefix: str) -> WSGIApplication: ...
    def __call__(self, environ: WSGIEnvironment, start_response: StartResponse) -> t.Iterable[bytes]: ...
