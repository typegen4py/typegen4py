import typing as t
from ..datastructures import Headers as Headers
from ..http import is_entity_header as is_entity_header
from ..wsgi import FileWrapper as FileWrapper
from types import TracebackType
from typing import Any
from wsgiref.types import WSGIApplication as WSGIApplication, WSGIEnvironment as WSGIEnvironment

class WSGIWarning(Warning): ...
class HTTPWarning(Warning): ...

def check_type(context: str, obj: object, need: t.Type=...) -> None: ...

class InputStream:
    def __init__(self, stream: t.BinaryIO) -> None: ...
    def read(self, *args: Any): ...
    def readline(self, *args: Any): ...
    def __iter__(self) -> Any: ...
    def close(self) -> None: ...

class ErrorStream:
    def __init__(self, stream: t.TextIO) -> None: ...
    def write(self, s: Any) -> None: ...
    def flush(self) -> None: ...
    def writelines(self, seq: Any) -> None: ...
    def close(self) -> None: ...

class GuardedWrite:
    def __init__(self, write: t.Callable[[bytes], None], chunks: t.List[int]) -> None: ...
    def __call__(self, s: bytes) -> None: ...

class GuardedIterator:
    closed: bool = ...
    headers_set: Any = ...
    chunks: Any = ...
    def __init__(self, iterator: t.Iterable[bytes], headers_set: t.Tuple[int, Headers], chunks: t.List[int]) -> None: ...
    def __iter__(self) -> GuardedIterator: ...
    def __next__(self) -> bytes: ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...

class LintMiddleware:
    app: Any = ...
    def __init__(self, app: WSGIApplication) -> None: ...
    def check_environ(self, environ: WSGIEnvironment) -> None: ...
    def check_start_response(self, status: str, headers: t.List[t.Tuple[str, str]], exc_info: t.Optional[t.Tuple[t.Type[BaseException], BaseException, TracebackType]]) -> t.Tuple[int, Headers]: ...
    def check_headers(self, headers: Headers) -> None: ...
    def check_iterator(self, app_iter: t.Iterable[bytes]) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> t.Iterable[bytes]: ...
