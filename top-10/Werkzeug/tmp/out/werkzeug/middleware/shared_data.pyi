import typing as t
from ..filesystem import get_filesystem_encoding as get_filesystem_encoding
from ..http import http_date as http_date, is_resource_modified as is_resource_modified
from ..security import safe_join as safe_join
from ..utils import get_content_type as get_content_type
from ..wsgi import get_path_info as get_path_info, wrap_file as wrap_file
from datetime import datetime
from typing import Any
from wsgiref.types import StartResponse, WSGIApplication as WSGIApplication, WSGIEnvironment as WSGIEnvironment

class SharedDataMiddleware:
    app: Any = ...
    exports: Any = ...
    cache: Any = ...
    cache_timeout: Any = ...
    fallback_mimetype: Any = ...
    def __init__(self, app: WSGIApplication, exports: t.Union[t.Dict[str, t.Union[str, t.Tuple[str, str]]], t.Iterable[t.Tuple[str, t.Union[str, t.Tuple[str, str]]]]], disallow: None=..., cache: bool=..., cache_timeout: int=..., fallback_mimetype: str=...): ...
    def is_allowed(self, filename: str) -> bool: ...
    def get_file_loader(self, filename: str) -> _TLoader: ...
    def get_package_loader(self, package: str, package_path: str) -> _TLoader: ...
    def get_directory_loader(self, directory: str) -> _TLoader: ...
    def generate_etag(self, mtime: datetime, file_size: int, real_filename: str) -> str: ...
    def __call__(self, environ: WSGIEnvironment, start_response: StartResponse) -> t.Iterable[bytes]: ...
