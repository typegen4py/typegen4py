import typing as t
from .wsgi import ClosingIterator as ClosingIterator
from typing import Any, Optional
from wsgiref.types import WSGIApplication as WSGIApplication

def get_ident(): ...

class _CannotUseContextVar(Exception): ...

greenlet_patched: Any

class ContextVar:
    storage: Any = ...
    def __init__(self, _name: Any) -> None: ...
    def get(self, default: Any): ...
    def set(self, value: Any) -> None: ...

def release_local(local: t.Union[Local, LocalStack]) -> None: ...

class Local:
    def __init__(self) -> None: ...
    @property
    def __storage__(self): ...
    @property
    def __ident_func__(self): ...
    @__ident_func__.setter
    def __ident_func__(self, func: Any) -> None: ...
    def __iter__(self) -> t.Iterator[t.Tuple[int, t.Any]]: ...
    def __call__(self, proxy: str) -> LocalProxy: ...
    def __release_local__(self) -> None: ...
    def __getattr__(self, name: str) -> t.Any: ...
    def __setattr__(self, name: str, value: t.Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...

class LocalStack:
    def __init__(self) -> None: ...
    def __release_local__(self) -> None: ...
    @property
    def __ident_func__(self) -> t.Callable[[], int]: ...
    @__ident_func__.setter
    def __ident_func__(self, value: t.Callable[[], int]) -> None: ...
    def __call__(self) -> LocalProxy: ...
    def push(self, obj: t.Any) -> t.List[t.Any]: ...
    def pop(self) -> t.Any: ...
    @property
    def top(self) -> t.Any: ...

class LocalManager:
    locals: Any = ...
    def __init__(self, locals: t.Optional[t.Iterable[t.Union[Local, LocalStack]]]=..., ident_func: None=...) -> None: ...
    @property
    def ident_func(self): ...
    @ident_func.setter
    def ident_func(self, func: Any) -> None: ...
    def get_ident(self) -> int: ...
    def cleanup(self) -> None: ...
    def make_middleware(self, app: WSGIApplication) -> WSGIApplication: ...
    def middleware(self, func: WSGIApplication) -> WSGIApplication: ...

class _ProxyLookup:
    bind_f: Any = ...
    fallback: Any = ...
    class_value: Any = ...
    def __init__(self, f: Optional[Any] = ..., fallback: Optional[Any] = ..., class_value: Optional[Any] = ...): ...
    name: Any = ...
    def __set_name__(self, owner: Any, name: Any) -> None: ...
    def __get__(self, instance: Any, owner: Optional[Any] = ...): ...
    def __call__(self, instance: Any, *args: Any, **kwargs: Any): ...

class _ProxyIOp(_ProxyLookup):
    bind_f: Any = ...
    def __init__(self, f: Optional[Any] = ..., fallback: Optional[Any] = ...): ...

class LocalProxy:
    def __init__(self, local: t.Union[Local, t.Callable[[], t.Any]], name: t.Optional[str]=...) -> None: ...
    __doc__: Any = ...
    __bytes__: Any = ...
    __format__: Any = ...
    __lt__: Any = ...
    __le__: Any = ...
    __eq__: Any = ...
    __ne__: Any = ...
    __gt__: Any = ...
    __ge__: Any = ...
    __hash__: Any = ...
    __bool__: Any = ...
    __getattr__: Any = ...
    __setattr__: Any = ...
    __delattr__: Any = ...
    __dir__: Any = ...
    __class__: Any = ...
    __instancecheck__: Any = ...
    __subclasscheck__: Any = ...
    __call__: Any = ...
    __len__: Any = ...
    __length_hint__: Any = ...
    __getitem__: Any = ...
    __setitem__: Any = ...
    __delitem__: Any = ...
    __iter__: Any = ...
    __next__: Any = ...
    __reversed__: Any = ...
    __contains__: Any = ...
    __add__: Any = ...
    __sub__: Any = ...
    __mul__: Any = ...
    __matmul__: Any = ...
    __truediv__: Any = ...
    __floordiv__: Any = ...
    __mod__: Any = ...
    __divmod__: Any = ...
    __pow__: Any = ...
    __lshift__: Any = ...
    __rshift__: Any = ...
    __and__: Any = ...
    __xor__: Any = ...
    __or__: Any = ...
    __radd__: Any = ...
    __rsub__: Any = ...
    __rmul__: Any = ...
    __rmatmul__: Any = ...
    __rtruediv__: Any = ...
    __rfloordiv__: Any = ...
    __rmod__: Any = ...
    __rdivmod__: Any = ...
    __rpow__: Any = ...
    __rlshift__: Any = ...
    __rrshift__: Any = ...
    __rand__: Any = ...
    __rxor__: Any = ...
    __ror__: Any = ...
    __iadd__: Any = ...
    __isub__: Any = ...
    __imul__: Any = ...
    __imatmul__: Any = ...
    __itruediv__: Any = ...
    __ifloordiv__: Any = ...
    __imod__: Any = ...
    __ipow__: Any = ...
    __ilshift__: Any = ...
    __irshift__: Any = ...
    __iand__: Any = ...
    __ixor__: Any = ...
    __ior__: Any = ...
    __neg__: Any = ...
    __pos__: Any = ...
    __abs__: Any = ...
    __invert__: Any = ...
    __complex__: Any = ...
    __int__: Any = ...
    __float__: Any = ...
    __index__: Any = ...
    __round__: Any = ...
    __trunc__: Any = ...
    __floor__: Any = ...
    __ceil__: Any = ...
    __enter__: Any = ...
    __exit__: Any = ...
    __await__: Any = ...
    __aiter__: Any = ...
    __anext__: Any = ...
    __aenter__: Any = ...
    __aexit__: Any = ...
    __copy__: Any = ...
    __deepcopy__: Any = ...
