import logging
import typing as t
from .wrappers.request import Request as Request
from typing import Any
from wsgiref.types import WSGIApplication as WSGIApplication, WSGIEnvironment as WSGIEnvironment

class _Missing:
    def __reduce__(self): ...

class _ColorStreamHandler(logging.StreamHandler):
    def __init__(self) -> None: ...

class _DictAccessorProperty:
    read_only: bool = ...
    name: Any = ...
    default: Any = ...
    load_func: Any = ...
    dump_func: Any = ...
    __doc__: Any = ...
    def __init__(self, name: str, default: t.Optional[_TAccessorValue]=..., load_func: t.Optional[t.Callable[[str], _TAccessorValue]]=..., dump_func: t.Optional[t.Callable[[_TAccessorValue], str]]=..., read_only: t.Optional[bool]=..., doc: t.Optional[str]=...) -> None: ...
    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]: ...
    def __get__(self, instance: None, owner: type) -> _DictAccessorProperty[_TAccessorValue]: ...
    def __get__(self, instance: t.Any, owner: type) -> _TAccessorValue: ...
    def __get__(self, instance: Any, owner: Any): ...
    def __set__(self, instance: t.Any, value: _TAccessorValue) -> None: ...
    def __delete__(self, instance: t.Any) -> None: ...
