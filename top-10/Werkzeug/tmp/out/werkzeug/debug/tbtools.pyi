import typing as t
from ..filesystem import get_filesystem_encoding as get_filesystem_encoding
from ..utils import cached_property as cached_property
from .console import Console as Console
from types import CodeType, TracebackType
from typing import Any

HEADER: str
FOOTER: str
PAGE_HTML: Any
CONSOLE_HTML: Any
SUMMARY_HTML: str
FRAME_HTML: str
SOURCE_LINE_HTML: str

def render_console_html(secret: str, evalex_trusted: bool=...) -> str: ...
def get_current_traceback(ignore_system_exceptions: bool=..., show_hidden_frames: bool=..., skip: int=...) -> Traceback: ...

class Line:
    lineno: Any = ...
    code: Any = ...
    in_frame: bool = ...
    current: bool = ...
    def __init__(self, lineno: int, code: str) -> None: ...
    @property
    def classes(self) -> t.List[str]: ...
    def render(self) -> str: ...

class Traceback:
    exc_type: Any = ...
    exc_value: Any = ...
    tb: Any = ...
    exception_type: Any = ...
    groups: Any = ...
    frames: Any = ...
    def __init__(self, exc_type: t.Type[BaseException], exc_value: BaseException, tb: TracebackType) -> None: ...
    def filter_hidden_frames(self) -> None: ...
    @property
    def is_syntax_error(self) -> bool: ...
    @property
    def exception(self) -> str: ...
    def log(self, logfile: t.Optional[t.TextIO]=...) -> None: ...
    def render_summary(self, include_title: bool=...) -> str: ...
    def render_full(self, evalex: bool=..., secret: t.Optional[str]=..., evalex_trusted: bool=...) -> str: ...
    def plaintext(self) -> str: ...
    @property
    def id(self) -> int: ...

class Group:
    exc_type: Any = ...
    exc_value: Any = ...
    info: Any = ...
    frames: Any = ...
    def __init__(self, exc_type: t.Type[BaseException], exc_value: BaseException, tb: TracebackType) -> None: ...
    def filter_hidden_frames(self) -> None: ...
    @property
    def exception(self) -> str: ...
    def render(self, mark_lib: bool=...) -> str: ...
    def render_text(self) -> str: ...

class Frame:
    lineno: Any = ...
    function_name: Any = ...
    locals: Any = ...
    globals: Any = ...
    filename: Any = ...
    module: Any = ...
    loader: Any = ...
    code: Any = ...
    hide: Any = ...
    info: Any = ...
    def __init__(self, exc_type: t.Type[BaseException], exc_value: BaseException, tb: TracebackType) -> None: ...
    def render(self, mark_lib: bool=...) -> str: ...
    def is_library(self) -> bool: ...
    def render_text(self) -> str: ...
    def render_line_context(self) -> str: ...
    def get_annotated_lines(self) -> t.List[Line]: ...
    def eval(self, code: t.Union[str, CodeType], mode: str=...) -> t.Any: ...
    def sourcelines(self) -> t.List[str]: ...
    def get_context_lines(self, context: int=...) -> t.Tuple[t.List[str], str, t.List[str]]: ...
    @property
    def current_line(self) -> str: ...
    def console(self) -> Console: ...
    @property
    def id(self) -> int: ...
