import typing as t
from typing import Any

missing: Any
RegexType: Any
HELP_HTML: str
OBJECT_DUMP_HTML: str

def debug_repr(obj: object) -> str: ...
def dump(obj: object=...) -> None: ...

class _Helper:
    def __call__(self, topic: t.Optional[t.Any]=...) -> None: ...

helper: Any

class DebugReprGenerator:
    def __init__(self) -> None: ...
    list_repr: Any = ...
    tuple_repr: Any = ...
    set_repr: Any = ...
    frozenset_repr: Any = ...
    deque_repr: Any = ...
    def regex_repr(self, obj: t.Pattern) -> str: ...
    def string_repr(self, obj: t.Union[str, bytes], limit: int=...) -> str: ...
    def dict_repr(self, d: t.Union[t.Dict[int, None], t.Dict[str, int], t.Dict[t.Union[str, int], int]], recursive: bool, limit: int=...) -> str: ...
    def object_repr(self, obj: t.Optional[t.Union[t.Type[dict], t.Callable, t.Type[list]]]) -> str: ...
    def dispatch_repr(self, obj: t.Any, recursive: bool) -> str: ...
    def fallback_repr(self) -> str: ...
    def repr(self, obj: object) -> str: ...
    def dump_object(self, obj: object) -> str: ...
    def dump_locals(self, d: t.Dict[str, t.Any]) -> str: ...
    def render_object_dump(self, items: t.List[t.Tuple[str, str]], title: str, repr: t.Optional[str]=...) -> str: ...
