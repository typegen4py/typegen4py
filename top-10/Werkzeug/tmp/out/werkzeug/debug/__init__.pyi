import typing as t
from ..wrappers.request import Request
from ..wrappers.response import Response
from .console import Console as Console
from .tbtools import get_current_traceback as get_current_traceback, render_console_html as render_console_html
from typing import Any
from wsgiref.types import StartResponse, WSGIApplication as WSGIApplication, WSGIEnvironment as WSGIEnvironment

PIN_TIME: Any

def hash_pin(pin: str) -> str: ...
def get_machine_id() -> str: ...

class _ConsoleFrame:
    console: Any = ...
    id: int = ...
    def __init__(self, namespace: t.Dict[str, t.Any]) -> None: ...

def get_pin_and_cookie_name(app: WSGIApplication) -> t.Union[t.Tuple[str, str], t.Tuple[None, None]]: ...

class DebuggedApplication:
    app: Any = ...
    evalex: Any = ...
    frames: Any = ...
    tracebacks: Any = ...
    request_key: Any = ...
    console_path: Any = ...
    console_init_func: Any = ...
    show_hidden_frames: Any = ...
    secret: Any = ...
    pin_logging: Any = ...
    def __init__(self, app: WSGIApplication, evalex: bool=..., request_key: str=..., console_path: str=..., console_init_func: t.Optional[t.Callable[[], t.Dict[str, t.Any]]]=..., show_hidden_frames: bool=..., pin_security: bool=..., pin_logging: bool=...) -> None: ...
    @property
    def pin(self) -> t.Optional[str]: ...
    @pin.setter
    def pin(self, value: str) -> None: ...
    @property
    def pin_cookie_name(self) -> str: ...
    def debug_application(self, environ: WSGIEnvironment, start_response: StartResponse) -> t.Iterator[bytes]: ...
    def execute_command(self, request: Any, command: Any, frame: Any): ...
    def display_console(self, request: Request) -> Response: ...
    def get_resource(self, request: Request, filename: str) -> Response: ...
    def check_pin_trust(self, environ: WSGIEnvironment) -> t.Optional[bool]: ...
    def pin_auth(self, request: Request) -> Response: ...
    def log_pin_request(self) -> Response: ...
    def __call__(self, environ: WSGIEnvironment, start_response: StartResponse) -> t.Iterable[bytes]: ...
