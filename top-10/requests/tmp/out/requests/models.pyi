from .auth import HTTPBasicAuth as HTTPBasicAuth
from .compat import StringIO as StringIO, basestring as basestring, builtin_str as builtin_str, bytes as bytes, chardet as chardet, cookielib as cookielib, is_py2 as is_py2, str as str, urlencode as urlencode, urlsplit as urlsplit, urlunparse as urlunparse
from .cookies import cookiejar_from_dict as cookiejar_from_dict, get_cookie_header as get_cookie_header
from .exceptions import ChunkedEncodingError as ChunkedEncodingError, ConnectionError as ConnectionError, ContentDecodingError as ContentDecodingError, HTTPError as HTTPError, InvalidURL as InvalidURL, MissingSchema as MissingSchema, StreamConsumedError as StreamConsumedError
from .hooks import default_hooks as default_hooks
from .packages.urllib3.exceptions import DecodeError as DecodeError, LocationParseError as LocationParseError, ProtocolError as ProtocolError, ReadTimeoutError as ReadTimeoutError
from .packages.urllib3.fields import RequestField as RequestField
from .packages.urllib3.filepost import encode_multipart_formdata as encode_multipart_formdata
from .packages.urllib3.util import parse_url as parse_url
from .status_codes import codes as codes
from .structures import CaseInsensitiveDict as CaseInsensitiveDict
from .utils import get_auth_from_url as get_auth_from_url, guess_filename as guess_filename, guess_json_utf as guess_json_utf, iter_slices as iter_slices, parse_header_links as parse_header_links, requote_uri as requote_uri, stream_decode_response_unicode as stream_decode_response_unicode, super_len as super_len, to_key_val_list as to_key_val_list, to_native_string as to_native_string
from io import BytesIO as BytesIO
from typing import Any, Optional

REDIRECT_STATI: Any
DEFAULT_REDIRECT_LIMIT: int
CONTENT_CHUNK_SIZE: Any
ITER_CHUNK_SIZE: int

class RequestEncodingMixin:
    @property
    def path_url(self): ...

class RequestHooksMixin:
    def register_hook(self, event: Any, hook: Any) -> None: ...
    def deregister_hook(self, event: Any, hook: Any): ...

class Request(RequestHooksMixin):
    hooks: Any = ...
    method: Any = ...
    url: Any = ...
    headers: Any = ...
    files: Any = ...
    data: Any = ...
    json: Any = ...
    params: Any = ...
    auth: Any = ...
    cookies: Any = ...
    def __init__(self, method: Optional[Any] = ..., url: Optional[Any] = ..., headers: Optional[Any] = ..., files: Optional[Any] = ..., data: Optional[Any] = ..., params: Optional[Any] = ..., auth: Optional[Any] = ..., cookies: Optional[Any] = ..., hooks: Optional[Any] = ..., json: Optional[Any] = ...) -> None: ...
    def prepare(self): ...

class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
    method: Any = ...
    url: Any = ...
    headers: Any = ...
    body: Any = ...
    hooks: Any = ...
    def __init__(self) -> None: ...
    def prepare(self, method: Optional[Any] = ..., url: Optional[Any] = ..., headers: Optional[Any] = ..., files: Optional[Any] = ..., data: Optional[Any] = ..., params: Optional[Any] = ..., auth: Optional[Any] = ..., cookies: Optional[Any] = ..., hooks: Optional[Any] = ..., json: Optional[Any] = ...) -> None: ...
    def copy(self): ...
    def prepare_method(self, method: Any) -> None: ...
    def prepare_url(self, url: Any, params: Any) -> None: ...
    def prepare_headers(self, headers: Any) -> None: ...
    def prepare_body(self, data: Any, files: Any, json: Optional[Any] = ...) -> None: ...
    def prepare_content_length(self, body: Any) -> None: ...
    def prepare_auth(self, auth: Any, url: str = ...) -> None: ...
    def prepare_cookies(self, cookies: Any) -> None: ...
    def prepare_hooks(self, hooks: Any) -> None: ...

class Response:
    __attrs__: Any = ...
    status_code: Any = ...
    headers: Any = ...
    raw: Any = ...
    url: Any = ...
    encoding: Any = ...
    history: Any = ...
    reason: Any = ...
    cookies: Any = ...
    elapsed: Any = ...
    request: Any = ...
    def __init__(self) -> None: ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def __iter__(self) -> Any: ...
    @property
    def ok(self): ...
    @property
    def is_redirect(self): ...
    @property
    def is_permanent_redirect(self): ...
    @property
    def apparent_encoding(self): ...
    def iter_content(self, chunk_size: int = ..., decode_unicode: bool = ...): ...
    def iter_lines(self, chunk_size: Any = ..., decode_unicode: Optional[Any] = ..., delimiter: Optional[Any] = ...) -> None: ...
    @property
    def content(self): ...
    @property
    def text(self): ...
    def json(self, **kwargs: Any): ...
    @property
    def links(self): ...
    def raise_for_status(self) -> None: ...
    def close(self): ...
