from ..exceptions import InsecurePlatformWarning as InsecurePlatformWarning, SNIMissingWarning as SNIMissingWarning, SSLError as SSLError
from typing import Any, Optional

SSLContext: Any
HAS_SNI: bool
create_default_context: Any
HASHFUNC_MAP: Any
DEFAULT_CIPHERS: str

class SSLContext:
    supports_set_ciphers: Any = ...
    protocol: Any = ...
    check_hostname: bool = ...
    verify_mode: Any = ...
    ca_certs: Any = ...
    options: int = ...
    certfile: Any = ...
    keyfile: Any = ...
    ciphers: Any = ...
    def __init__(self, protocol_version: Any) -> None: ...
    def load_cert_chain(self, certfile: Any, keyfile: Any) -> None: ...
    def load_verify_locations(self, cafile: Optional[Any] = ..., capath: Optional[Any] = ...) -> None: ...
    def set_ciphers(self, cipher_suite: Any) -> None: ...
    def wrap_socket(self, socket: Any, server_hostname: Optional[Any] = ...): ...

def assert_fingerprint(cert: Any, fingerprint: Any) -> None: ...
def resolve_cert_reqs(candidate: Any): ...
def resolve_ssl_version(candidate: Any): ...
def create_urllib3_context(ssl_version: Optional[Any] = ..., cert_reqs: Optional[Any] = ..., options: Optional[Any] = ..., ciphers: Optional[Any] = ...): ...
def ssl_wrap_socket(sock: Any, keyfile: Optional[Any] = ..., certfile: Optional[Any] = ..., cert_reqs: Optional[Any] = ..., ca_certs: Optional[Any] = ..., server_hostname: Optional[Any] = ..., ssl_version: Optional[Any] = ..., ciphers: Optional[Any] = ..., ssl_context: Optional[Any] = ..., ca_cert_dir: Optional[Any] = ...): ...
