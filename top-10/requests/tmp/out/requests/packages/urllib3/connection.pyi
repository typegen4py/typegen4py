import ssl
from .exceptions import ConnectTimeoutError as ConnectTimeoutError, NewConnectionError as NewConnectionError, SubjectAltNameWarning as SubjectAltNameWarning, SystemTimeWarning as SystemTimeWarning
from .packages.ssl_match_hostname import match_hostname as match_hostname
from .util import connection as connection
from .util.ssl_ import assert_fingerprint as assert_fingerprint, resolve_cert_reqs as resolve_cert_reqs, resolve_ssl_version as resolve_ssl_version, ssl_wrap_socket as ssl_wrap_socket
from httplib import HTTPConnection as _HTTPConnection, HTTPException as HTTPException
from typing import Any, Optional

BaseSSLError = ssl.SSLError

class BaseSSLError(BaseException): ...
ConnectionError = ConnectionError

class ConnectionError(Exception): ...

port_by_scheme: Any
RECENT_DATE: Any

class DummyConnection: ...

class HTTPConnection(_HTTPConnection):
    default_port: Any = ...
    default_socket_options: Any = ...
    is_verified: bool = ...
    source_address: Any = ...
    socket_options: Any = ...
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def connect(self) -> None: ...

class HTTPSConnection(HTTPConnection):
    default_port: Any = ...
    key_file: Any = ...
    cert_file: Any = ...
    def __init__(self, host: Any, port: Optional[Any] = ..., key_file: Optional[Any] = ..., cert_file: Optional[Any] = ..., strict: Optional[Any] = ..., timeout: Any = ..., **kw: Any) -> None: ...
    sock: Any = ...
    def connect(self) -> None: ...

class VerifiedHTTPSConnection(HTTPSConnection):
    cert_reqs: Any = ...
    ca_certs: Any = ...
    ca_cert_dir: Any = ...
    ssl_version: Any = ...
    assert_fingerprint: Any = ...
    key_file: Any = ...
    cert_file: Any = ...
    assert_hostname: Any = ...
    def set_cert(self, key_file: Optional[Any] = ..., cert_file: Optional[Any] = ..., cert_reqs: Optional[Any] = ..., ca_certs: Optional[Any] = ..., assert_hostname: Optional[Any] = ..., assert_fingerprint: Optional[Any] = ..., ca_cert_dir: Optional[Any] = ...) -> None: ...
    sock: Any = ...
    auto_open: int = ...
    is_verified: Any = ...
    def connect(self) -> None: ...
UnverifiedHTTPSConnection = HTTPSConnection
HTTPSConnection = VerifiedHTTPSConnection
HTTPSConnection = DummyConnection
