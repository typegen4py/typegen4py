from collections import MutableMapping
from typing import Any, Optional

class RLock:
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class RecentlyUsedContainer(MutableMapping):
    ContainerCls: Any = ...
    dispose_func: Any = ...
    lock: Any = ...
    def __init__(self, maxsize: int = ..., dispose_func: Optional[Any] = ...) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def clear(self) -> None: ...
    def keys(self): ...

class HTTPHeaderDict(MutableMapping):
    def __init__(self, headers: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def __setitem__(self, key: Any, val: Any): ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def __contains__(self, key: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def pop(self, key: Any, default: Any = ...): ...
    def discard(self, key: Any) -> None: ...
    def add(self, key: Any, val: Any) -> None: ...
    def extend(self, *args: Any, **kwargs: Any) -> None: ...
    def getlist(self, key: Any): ...
    getheaders: Any = ...
    getallmatchingheaders: Any = ...
    iget: Any = ...
    def copy(self): ...
    def iteritems(self) -> None: ...
    def itermerged(self) -> None: ...
    def items(self): ...
    @classmethod
    def from_httplib(cls, message: Any): ...
