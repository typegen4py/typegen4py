from .connection import BaseSSLError as BaseSSLError, DummyConnection as DummyConnection, HTTPConnection as HTTPConnection, HTTPException as HTTPException, HTTPSConnection as HTTPSConnection, VerifiedHTTPSConnection as VerifiedHTTPSConnection, port_by_scheme as port_by_scheme
from .exceptions import ClosedPoolError as ClosedPoolError, EmptyPoolError as EmptyPoolError, HeaderParsingError as HeaderParsingError, HostChangedError as HostChangedError, InsecureRequestWarning as InsecureRequestWarning, LocationValueError as LocationValueError, MaxRetryError as MaxRetryError, NewConnectionError as NewConnectionError, ProtocolError as ProtocolError, ProxyError as ProxyError, ReadTimeoutError as ReadTimeoutError, SSLError as SSLError, TimeoutError as TimeoutError
from .packages.ssl_match_hostname import CertificateError as CertificateError
from .request import RequestMethods as RequestMethods
from .response import HTTPResponse as HTTPResponse
from .util.connection import is_connection_dropped as is_connection_dropped
from .util.response import assert_header_parsing as assert_header_parsing
from .util.retry import Retry as Retry
from .util.timeout import Timeout as Timeout
from .util.url import Url as Url, get_host as get_host
from typing import Any, Optional

xrange: Any
log: Any

class ConnectionPool:
    scheme: Any = ...
    QueueCls: Any = ...
    host: Any = ...
    port: Any = ...
    def __init__(self, host: Any, port: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any): ...
    def close() -> None: ...

class HTTPConnectionPool(ConnectionPool, RequestMethods):
    scheme: str = ...
    ConnectionCls: Any = ...
    strict: Any = ...
    timeout: Any = ...
    retries: Any = ...
    pool: Any = ...
    block: Any = ...
    proxy: Any = ...
    proxy_headers: Any = ...
    num_connections: int = ...
    num_requests: int = ...
    conn_kw: Any = ...
    def __init__(self, host: Any, port: Optional[Any] = ..., strict: bool = ..., timeout: Any = ..., maxsize: int = ..., block: bool = ..., headers: Optional[Any] = ..., retries: Optional[Any] = ..., _proxy: Optional[Any] = ..., _proxy_headers: Optional[Any] = ..., **conn_kw: Any) -> None: ...
    def close(self) -> None: ...
    def is_same_host(self, url: Any): ...
    def urlopen(self, method: Any, url: Any, body: Optional[Any] = ..., headers: Optional[Any] = ..., retries: Optional[Any] = ..., redirect: bool = ..., assert_same_host: bool = ..., timeout: Any = ..., pool_timeout: Optional[Any] = ..., release_conn: Optional[Any] = ..., **response_kw: Any): ...

class HTTPSConnectionPool(HTTPConnectionPool):
    scheme: str = ...
    ConnectionCls: Any = ...
    key_file: Any = ...
    cert_file: Any = ...
    cert_reqs: Any = ...
    ca_certs: Any = ...
    ca_cert_dir: Any = ...
    ssl_version: Any = ...
    assert_hostname: Any = ...
    assert_fingerprint: Any = ...
    def __init__(self, host: Any, port: Optional[Any] = ..., strict: bool = ..., timeout: Any = ..., maxsize: int = ..., block: bool = ..., headers: Optional[Any] = ..., retries: Optional[Any] = ..., _proxy: Optional[Any] = ..., _proxy_headers: Optional[Any] = ..., key_file: Optional[Any] = ..., cert_file: Optional[Any] = ..., cert_reqs: Optional[Any] = ..., ca_certs: Optional[Any] = ..., ssl_version: Optional[Any] = ..., assert_hostname: Optional[Any] = ..., assert_fingerprint: Optional[Any] = ..., ca_cert_dir: Optional[Any] = ..., **conn_kw: Any) -> None: ...

def connection_from_url(url: Any, **kw: Any): ...
