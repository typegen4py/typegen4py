from typing import Any, Optional

class OrderedDict(dict):
    def __init__(self, *args: Any, **kwds: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any, dict_setitem: Any = ...) -> None: ...
    def __delitem__(self, key: Any, dict_delitem: Any = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __reversed__(self) -> None: ...
    def clear(self) -> None: ...
    def popitem(self, last: bool = ...): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def iterkeys(self): ...
    def itervalues(self) -> None: ...
    def iteritems(self) -> None: ...
    def update(*args: Any, **kwds: Any) -> None: ...
    def pop(self, key: Any, default: Any = ...): ...
    def setdefault(self, key: Any, default: Optional[Any] = ...): ...
    def __reduce__(self): ...
    def copy(self): ...
    @classmethod
    def fromkeys(cls, iterable: Any, value: Optional[Any] = ...): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def viewkeys(self): ...
    def viewvalues(self): ...
    def viewitems(self): ...
