from . import certs as certs
from .compat import OrderedDict as OrderedDict, basestring as basestring, builtin_str as builtin_str, bytes as bytes, getproxies as getproxies, is_py2 as is_py2, proxy_bypass as proxy_bypass, quote as quote, str as str, unquote as unquote, urlparse as urlparse, urlunparse as urlunparse
from .cookies import RequestsCookieJar as RequestsCookieJar, cookiejar_from_dict as cookiejar_from_dict
from .exceptions import FileModeWarning as FileModeWarning, InvalidURL as InvalidURL
from .structures import CaseInsensitiveDict as CaseInsensitiveDict
from typing import Any

NETRC_FILES: Any
DEFAULT_CA_BUNDLE_PATH: Any

def dict_to_sequence(d: Any): ...
def super_len(o: Any): ...
def get_netrc_auth(url: Any, raise_errors: bool = ...): ...
def guess_filename(obj: Any): ...
def from_key_val_list(value: Any): ...
def to_key_val_list(value: Any): ...
def parse_list_header(value: Any): ...
def parse_dict_header(value: Any): ...
def unquote_header_value(value: Any, is_filename: bool = ...): ...
def dict_from_cookiejar(cj: Any): ...
def add_dict_to_cookiejar(cj: Any, cookie_dict: Any): ...
def get_encodings_from_content(content: Any): ...
def get_encoding_from_headers(headers: Any): ...
def stream_decode_response_unicode(iterator: Any, r: Any) -> None: ...
def iter_slices(string: Any, slice_length: Any) -> None: ...
def get_unicode_from_response(r: Any): ...

UNRESERVED_SET: Any

def unquote_unreserved(uri: Any): ...
def requote_uri(uri: Any): ...
def address_in_network(ip: Any, net: Any): ...
def dotted_netmask(mask: Any): ...
def is_ipv4_address(string_ip: Any): ...
def is_valid_cidr(string_network: Any): ...
def should_bypass_proxies(url: Any): ...
def get_environ_proxies(url: Any): ...
def select_proxy(url: Any, proxies: Any): ...
def default_user_agent(name: str = ...): ...
def default_headers(): ...
def parse_header_links(value: Any): ...
def guess_json_utf(data: Any): ...
def prepend_scheme_if_needed(url: Any, new_scheme: Any): ...
def get_auth_from_url(url: Any): ...
def to_native_string(string: Any, encoding: str = ...): ...
def urldefragauth(url: Any): ...
