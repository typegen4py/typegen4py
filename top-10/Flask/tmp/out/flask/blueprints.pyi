from .helpers import _PackageBoundObject
from typing import Any, Optional

class BlueprintSetupState:
    app: Any = ...
    blueprint: Any = ...
    options: Any = ...
    first_registration: Any = ...
    subdomain: Any = ...
    url_prefix: Any = ...
    url_defaults: Any = ...
    def __init__(self, blueprint: Any, app: Any, options: Any, first_registration: Any) -> None: ...
    def add_url_rule(self, rule: Any, endpoint: Optional[Any] = ..., view_func: Optional[Any] = ..., **options: Any) -> None: ...

class Blueprint(_PackageBoundObject):
    warn_on_modifications: bool = ...
    json_encoder: Any = ...
    json_decoder: Any = ...
    import_name: Any = ...
    template_folder: Any = ...
    root_path: Any = ...
    name: Any = ...
    url_prefix: Any = ...
    subdomain: Any = ...
    static_folder: Any = ...
    static_url_path: Any = ...
    deferred_functions: Any = ...
    url_values_defaults: Any = ...
    cli_group: Any = ...
    def __init__(self, name: Any, import_name: Any, static_folder: Optional[Any] = ..., static_url_path: Optional[Any] = ..., template_folder: Optional[Any] = ..., url_prefix: Optional[Any] = ..., subdomain: Optional[Any] = ..., url_defaults: Optional[Any] = ..., root_path: Optional[Any] = ..., cli_group: Any = ...) -> None: ...
    def record(self, func: Any) -> None: ...
    def record_once(self, func: Any): ...
    def make_setup_state(self, app: Any, options: Any, first_registration: bool = ...): ...
    def register(self, app: Any, options: Any, first_registration: bool = ...) -> None: ...
    def route(self, rule: Any, **options: Any): ...
    def add_url_rule(self, rule: Any, endpoint: Optional[Any] = ..., view_func: Optional[Any] = ..., **options: Any): ...
    def endpoint(self, endpoint: Any): ...
    def app_template_filter(self, name: Optional[Any] = ...): ...
    def add_app_template_filter(self, f: Any, name: Optional[Any] = ...) -> None: ...
    def app_template_test(self, name: Optional[Any] = ...): ...
    def add_app_template_test(self, f: Any, name: Optional[Any] = ...) -> None: ...
    def app_template_global(self, name: Optional[Any] = ...): ...
    def add_app_template_global(self, f: Any, name: Optional[Any] = ...) -> None: ...
    def before_request(self, f: Any): ...
    def before_app_request(self, f: Any): ...
    def before_app_first_request(self, f: Any): ...
    def after_request(self, f: Any): ...
    def after_app_request(self, f: Any): ...
    def teardown_request(self, f: Any): ...
    def teardown_app_request(self, f: Any): ...
    def context_processor(self, f: Any): ...
    def app_context_processor(self, f: Any): ...
    def app_errorhandler(self, code: Any): ...
    def url_value_preprocessor(self, f: Any): ...
    def url_defaults(self, f: Any): ...
    def app_url_value_preprocessor(self, f: Any): ...
    def app_url_defaults(self, f: Any): ...
    def errorhandler(self, code_or_exception: Any): ...
    def register_error_handler(self, code_or_exception: Any, f: Any): ...
