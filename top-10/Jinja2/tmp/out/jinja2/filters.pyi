from ._compat import abc as abc, imap as imap, iteritems as iteritems, string_types as string_types, text_type as text_type
from .exceptions import FilterArgumentError as FilterArgumentError
from .runtime import Undefined as Undefined
from .utils import htmlsafe_json_dumps as htmlsafe_json_dumps, pformat as pformat, unicode_urlencode as unicode_urlencode, urlize as urlize
from collections import namedtuple
from typing import Any, Optional

def contextfilter(f: Any): ...
def evalcontextfilter(f: Any): ...
def environmentfilter(f: Any): ...
def ignore_case(value: Any): ...
def make_attrgetter(environment: Any, attribute: Any, postprocess: Optional[Any] = ..., default: Optional[Any] = ...): ...
def make_multi_attrgetter(environment: Any, attribute: Any, postprocess: Optional[Any] = ...): ...
def do_forceescape(value: Any): ...
def do_urlencode(value: Any): ...
def do_replace(eval_ctx: Any, s: Any, old: Any, new: Any, count: Optional[Any] = ...): ...
def do_upper(s: Any): ...
def do_lower(s: Any): ...
def do_xmlattr(_eval_ctx: Any, d: Any, autospace: bool = ...): ...
def do_capitalize(s: Any): ...
def do_title(s: Any): ...
def do_dictsort(value: Any, case_sensitive: bool = ..., by: str = ..., reverse: bool = ...): ...
def do_sort(environment: Any, value: Any, reverse: bool = ..., case_sensitive: bool = ..., attribute: Optional[Any] = ...): ...
def do_unique(environment: Any, value: Any, case_sensitive: bool = ..., attribute: Optional[Any] = ...) -> None: ...
def do_min(environment: Any, value: Any, case_sensitive: bool = ..., attribute: Optional[Any] = ...): ...
def do_max(environment: Any, value: Any, case_sensitive: bool = ..., attribute: Optional[Any] = ...): ...
def do_default(value: Any, default_value: str = ..., boolean: bool = ...): ...
def do_join(eval_ctx: Any, value: Any, d: str = ..., attribute: Optional[Any] = ...): ...
def do_center(value: Any, width: int = ...): ...
def do_first(environment: Any, seq: Any): ...
def do_last(environment: Any, seq: Any): ...
def do_random(context: Any, seq: Any): ...
def do_filesizeformat(value: Any, binary: bool = ...): ...
def do_pprint(value: Any, verbose: bool = ...): ...
def do_urlize(eval_ctx: Any, value: Any, trim_url_limit: Optional[Any] = ..., nofollow: bool = ..., target: Optional[Any] = ..., rel: Optional[Any] = ...): ...
def do_indent(s: Any, width: int = ..., first: bool = ..., blank: bool = ..., indentfirst: Optional[Any] = ...): ...
def do_truncate(env: Any, s: Any, length: int = ..., killwords: bool = ..., end: str = ..., leeway: Optional[Any] = ...): ...
def do_wordwrap(environment: Any, s: Any, width: int = ..., break_long_words: bool = ..., wrapstring: Optional[Any] = ..., break_on_hyphens: bool = ...): ...
def do_wordcount(s: Any): ...
def do_int(value: Any, default: int = ..., base: int = ...): ...
def do_float(value: Any, default: float = ...): ...
def do_format(value: Any, *args: Any, **kwargs: Any): ...
def do_trim(value: Any, chars: Optional[Any] = ...): ...
def do_striptags(value: Any): ...
def do_slice(value: Any, slices: Any, fill_with: Optional[Any] = ...) -> None: ...
def do_batch(value: Any, linecount: Any, fill_with: Optional[Any] = ...) -> None: ...
def do_round(value: Any, precision: int = ..., method: str = ...): ...

_GroupTuple = namedtuple('_GroupTuple', ['grouper', 'list'])

def do_groupby(environment: Any, value: Any, attribute: Any): ...
def do_sum(environment: Any, iterable: Any, attribute: Optional[Any] = ..., start: int = ...): ...
def do_list(value: Any): ...
def do_mark_safe(value: Any): ...
def do_mark_unsafe(value: Any): ...
def do_reverse(value: Any): ...
def do_attr(environment: Any, obj: Any, name: Any): ...
def do_map(*args: Any, **kwargs: Any) -> None: ...
def do_select(*args: Any, **kwargs: Any): ...
def do_reject(*args: Any, **kwargs: Any): ...
def do_selectattr(*args: Any, **kwargs: Any): ...
def do_rejectattr(*args: Any, **kwargs: Any): ...
def do_tojson(eval_ctx: Any, value: Any, indent: Optional[Any] = ...): ...
def prepare_map(args: Any, kwargs: Any): ...
def prepare_select_or_reject(args: Any, kwargs: Any, modfunc: Any, lookup_attr: Any): ...
def select_or_reject(args: Any, kwargs: Any, modfunc: Any, lookup_attr: Any) -> None: ...

FILTERS: Any
