from ._compat import PY2 as PY2, abc as abc, range_type as range_type, string_types as string_types
from .environment import Environment as Environment
from .exceptions import SecurityError as SecurityError
from markupsafe import EscapeFormatter
from string import Formatter
from typing import Any, Optional

MAX_RANGE: int
UNSAFE_FUNCTION_ATTRIBUTES: Any
UNSAFE_METHOD_ATTRIBUTES: Any
UNSAFE_GENERATOR_ATTRIBUTES: Any
UNSAFE_COROUTINE_ATTRIBUTES: Any
UNSAFE_ASYNC_GENERATOR_ATTRIBUTES: Any

class _MagicFormatMapping(abc.Mapping):
    def __init__(self, args: Any, kwargs: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...

def inspect_format_method(callable: Any): ...
def safe_range(*args: Any): ...
def unsafe(f: Any): ...
def is_internal_attribute(obj: Any, attr: Any): ...
def modifies_known_mutable(obj: Any, attr: Any): ...

class SandboxedEnvironment(Environment):
    sandboxed: bool = ...
    default_binop_table: Any = ...
    default_unop_table: Any = ...
    intercepted_binops: Any = ...
    intercepted_unops: Any = ...
    def intercept_unop(self, operator: Any): ...
    binop_table: Any = ...
    unop_table: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def is_safe_attribute(self, obj: Any, attr: Any, value: Any): ...
    def is_safe_callable(self, obj: Any): ...
    def call_binop(self, context: Any, operator: Any, left: Any, right: Any): ...
    def call_unop(self, context: Any, operator: Any, arg: Any): ...
    def getitem(self, obj: Any, argument: Any): ...
    def getattr(self, obj: Any, attribute: Any): ...
    def unsafe_undefined(self, obj: Any, attribute: Any): ...
    def format_string(self, s: Any, args: Any, kwargs: Any, format_func: Optional[Any] = ...): ...
    def call(__self: Any, __context: Any, __obj: Any, *args: Any, **kwargs: Any): ...

class ImmutableSandboxedEnvironment(SandboxedEnvironment):
    def is_safe_attribute(self, obj: Any, attr: Any, value: Any): ...

class SandboxedFormatterMixin:
    def __init__(self, env: Any) -> None: ...
    def get_field(self, field_name: Any, args: Any, kwargs: Any): ...

class SandboxedFormatter(SandboxedFormatterMixin, Formatter):
    def __init__(self, env: Any) -> None: ...

class SandboxedEscapeFormatter(SandboxedFormatterMixin, EscapeFormatter):
    def __init__(self, env: Any, escape: Any) -> None: ...
