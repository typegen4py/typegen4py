from . import nodes as nodes
from ._compat import NativeStringIO as NativeStringIO, imap as imap, iteritems as iteritems, izip as izip, range_type as range_type, string_types as string_types, text_type as text_type
from .exceptions import TemplateAssertionError as TemplateAssertionError
from .idtracking import Symbols as Symbols, VAR_LOAD_ALIAS as VAR_LOAD_ALIAS, VAR_LOAD_PARAMETER as VAR_LOAD_PARAMETER, VAR_LOAD_RESOLVE as VAR_LOAD_RESOLVE, VAR_LOAD_UNDEFINED as VAR_LOAD_UNDEFINED
from .nodes import EvalContext as EvalContext
from .optimizer import Optimizer as Optimizer
from .utils import concat as concat
from .visitor import NodeVisitor as NodeVisitor
from collections import namedtuple
from typing import Any, Optional

operators: Any
dict_item_iter: str
code_features: Any
supports_yield_from: bool

def optimizeconst(f: Any): ...
def generate(node: Any, environment: Any, name: Any, filename: Any, stream: Optional[Any] = ..., defer_init: bool = ..., optimized: bool = ...): ...
def has_safe_repr(value: Any): ...
def find_undeclared(nodes: Any, names: Any): ...

class MacroRef:
    node: Any = ...
    accesses_caller: bool = ...
    accesses_kwargs: bool = ...
    accesses_varargs: bool = ...
    def __init__(self, node: Any) -> None: ...

class Frame:
    eval_ctx: Any = ...
    symbols: Any = ...
    toplevel: bool = ...
    rootlevel: bool = ...
    require_output_check: Any = ...
    buffer: Any = ...
    block: Any = ...
    parent: Any = ...
    def __init__(self, eval_ctx: Any, parent: Optional[Any] = ..., level: Optional[Any] = ...) -> None: ...
    def copy(self): ...
    def inner(self, isolated: bool = ...): ...
    def soft(self): ...
    __copy__: Any = ...

class VisitorExit(RuntimeError): ...

class DependencyFinderVisitor(NodeVisitor):
    filters: Any = ...
    tests: Any = ...
    def __init__(self) -> None: ...
    def visit_Filter(self, node: Any) -> None: ...
    def visit_Test(self, node: Any) -> None: ...
    def visit_Block(self, node: Any) -> None: ...

class UndeclaredNameVisitor(NodeVisitor):
    names: Any = ...
    undeclared: Any = ...
    def __init__(self, names: Any) -> None: ...
    def visit_Name(self, node: Any) -> None: ...
    def visit_Block(self, node: Any) -> None: ...

class CompilerExit(Exception): ...

class CodeGenerator(NodeVisitor):
    environment: Any = ...
    name: Any = ...
    filename: Any = ...
    stream: Any = ...
    created_block_context: bool = ...
    defer_init: Any = ...
    optimized: Any = ...
    optimizer: Any = ...
    import_aliases: Any = ...
    blocks: Any = ...
    extends_so_far: int = ...
    has_known_extends: bool = ...
    code_lineno: int = ...
    tests: Any = ...
    filters: Any = ...
    debug_info: Any = ...
    def __init__(self, environment: Any, name: Any, filename: Any, stream: Optional[Any] = ..., defer_init: bool = ..., optimized: bool = ...) -> None: ...
    def fail(self, msg: Any, lineno: Any) -> None: ...
    def temporary_identifier(self): ...
    def buffer(self, frame: Any) -> None: ...
    def return_buffer_contents(self, frame: Any, force_unescaped: bool = ...) -> None: ...
    def indent(self) -> None: ...
    def outdent(self, step: int = ...) -> None: ...
    def start_write(self, frame: Any, node: Optional[Any] = ...) -> None: ...
    def end_write(self, frame: Any) -> None: ...
    def simple_write(self, s: Any, frame: Any, node: Optional[Any] = ...) -> None: ...
    def blockvisit(self, nodes: Any, frame: Any) -> None: ...
    def write(self, x: Any) -> None: ...
    def writeline(self, x: Any, node: Optional[Any] = ..., extra: int = ...) -> None: ...
    def newline(self, node: Optional[Any] = ..., extra: int = ...) -> None: ...
    def signature(self, node: Any, frame: Any, extra_kwargs: Optional[Any] = ...) -> None: ...
    def pull_dependencies(self, nodes: Any) -> None: ...
    def enter_frame(self, frame: Any) -> None: ...
    def leave_frame(self, frame: Any, with_python_scope: bool = ...) -> None: ...
    def func(self, name: Any): ...
    def macro_body(self, node: Any, frame: Any): ...
    def macro_def(self, macro_ref: Any, frame: Any) -> None: ...
    def position(self, node: Any): ...
    def dump_local_context(self, frame: Any): ...
    def write_commons(self) -> None: ...
    def push_parameter_definitions(self, frame: Any) -> None: ...
    def pop_parameter_definitions(self) -> None: ...
    def mark_parameter_stored(self, target: Any) -> None: ...
    def push_context_reference(self, target: Any) -> None: ...
    def pop_context_reference(self) -> None: ...
    def get_context_ref(self): ...
    def get_resolve_func(self): ...
    def derive_context(self, frame: Any): ...
    def parameter_is_undeclared(self, target: Any): ...
    def push_assign_tracking(self) -> None: ...
    def pop_assign_tracking(self, frame: Any) -> None: ...
    def visit_Template(self, node: Any, frame: Optional[Any] = ...) -> None: ...
    def visit_Block(self, node: Any, frame: Any) -> None: ...
    def visit_Extends(self, node: Any, frame: Any) -> None: ...
    def visit_Include(self, node: Any, frame: Any) -> None: ...
    def visit_Import(self, node: Any, frame: Any) -> None: ...
    def visit_FromImport(self, node: Any, frame: Any) -> None: ...
    def visit_For(self, node: Any, frame: Any) -> None: ...
    def visit_If(self, node: Any, frame: Any) -> None: ...
    def visit_Macro(self, node: Any, frame: Any) -> None: ...
    def visit_CallBlock(self, node: Any, frame: Any) -> None: ...
    def visit_FilterBlock(self, node: Any, frame: Any) -> None: ...
    def visit_With(self, node: Any, frame: Any) -> None: ...
    def visit_ExprStmt(self, node: Any, frame: Any) -> None: ...

    _FinalizeInfo = namedtuple('_FinalizeInfo', ['const', 'src'])
    def visit_Output(self, node: Any, frame: Any) -> None: ...
    def visit_Assign(self, node: Any, frame: Any) -> None: ...
    def visit_AssignBlock(self, node: Any, frame: Any) -> None: ...
    def visit_Name(self, node: Any, frame: Any) -> None: ...
    def visit_NSRef(self, node: Any, frame: Any) -> None: ...
    def visit_Const(self, node: Any, frame: Any) -> None: ...
    def visit_TemplateData(self, node: Any, frame: Any) -> None: ...
    def visit_Tuple(self, node: Any, frame: Any) -> None: ...
    def visit_List(self, node: Any, frame: Any) -> None: ...
    def visit_Dict(self, node: Any, frame: Any) -> None: ...
    def binop(operator: Any, interceptable: bool = ...): ...
    def uaop(operator: Any, interceptable: bool = ...): ...
    visit_Add: Any = ...
    visit_Sub: Any = ...
    visit_Mul: Any = ...
    visit_Div: Any = ...
    visit_FloorDiv: Any = ...
    visit_Pow: Any = ...
    visit_Mod: Any = ...
    visit_And: Any = ...
    visit_Or: Any = ...
    visit_Pos: Any = ...
    visit_Neg: Any = ...
    visit_Not: Any = ...
    def visit_Concat(self, node: Any, frame: Any) -> None: ...
    def visit_Compare(self, node: Any, frame: Any) -> None: ...
    def visit_Operand(self, node: Any, frame: Any) -> None: ...
    def visit_Getattr(self, node: Any, frame: Any) -> None: ...
    def visit_Getitem(self, node: Any, frame: Any) -> None: ...
    def visit_Slice(self, node: Any, frame: Any) -> None: ...
    def visit_Filter(self, node: Any, frame: Any) -> None: ...
    def visit_Test(self, node: Any, frame: Any) -> None: ...
    def visit_CondExpr(self, node: Any, frame: Any): ...
    def visit_Call(self, node: Any, frame: Any, forward_caller: bool = ...) -> None: ...
    def visit_Keyword(self, node: Any, frame: Any) -> None: ...
    def visit_MarkSafe(self, node: Any, frame: Any) -> None: ...
    def visit_MarkSafeIfAutoescape(self, node: Any, frame: Any) -> None: ...
    def visit_EnvironmentAttribute(self, node: Any, frame: Any) -> None: ...
    def visit_ExtensionAttribute(self, node: Any, frame: Any) -> None: ...
    def visit_ImportedName(self, node: Any, frame: Any) -> None: ...
    def visit_InternalName(self, node: Any, frame: Any) -> None: ...
    def visit_ContextReference(self, node: Any, frame: Any) -> None: ...
    def visit_DerivedContextReference(self, node: Any, frame: Any) -> None: ...
    def visit_Continue(self, node: Any, frame: Any) -> None: ...
    def visit_Break(self, node: Any, frame: Any) -> None: ...
    def visit_Scope(self, node: Any, frame: Any) -> None: ...
    def visit_OverlayScope(self, node: Any, frame: Any) -> None: ...
    def visit_EvalContextModifier(self, node: Any, frame: Any) -> None: ...
    def visit_ScopedEvalContextModifier(self, node: Any, frame: Any) -> None: ...
