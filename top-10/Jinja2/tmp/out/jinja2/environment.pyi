from . import nodes as nodes
from ._compat import PY2 as PY2, PYPY as PYPY, encode_filename as encode_filename, implements_iterator as implements_iterator, implements_to_string as implements_to_string, iteritems as iteritems, reraise as reraise, string_types as string_types, text_type as text_type
from .compiler import CodeGenerator as CodeGenerator, generate as generate
from .defaults import BLOCK_END_STRING as BLOCK_END_STRING, BLOCK_START_STRING as BLOCK_START_STRING, COMMENT_END_STRING as COMMENT_END_STRING, COMMENT_START_STRING as COMMENT_START_STRING, DEFAULT_FILTERS as DEFAULT_FILTERS, DEFAULT_NAMESPACE as DEFAULT_NAMESPACE, DEFAULT_POLICIES as DEFAULT_POLICIES, DEFAULT_TESTS as DEFAULT_TESTS, KEEP_TRAILING_NEWLINE as KEEP_TRAILING_NEWLINE, LINE_COMMENT_PREFIX as LINE_COMMENT_PREFIX, LINE_STATEMENT_PREFIX as LINE_STATEMENT_PREFIX, LSTRIP_BLOCKS as LSTRIP_BLOCKS, NEWLINE_SEQUENCE as NEWLINE_SEQUENCE, TRIM_BLOCKS as TRIM_BLOCKS, VARIABLE_END_STRING as VARIABLE_END_STRING, VARIABLE_START_STRING as VARIABLE_START_STRING
from .exceptions import TemplateNotFound as TemplateNotFound, TemplateRuntimeError as TemplateRuntimeError, TemplateSyntaxError as TemplateSyntaxError, TemplatesNotFound as TemplatesNotFound, UndefinedError as UndefinedError
from .lexer import TokenStream as TokenStream, get_lexer as get_lexer
from .nodes import EvalContext as EvalContext
from .parser import Parser as Parser
from .runtime import Context as Context, Undefined as Undefined, new_context as new_context
from .utils import LRUCache as LRUCache, concat as concat, consume as consume, have_async_gen as have_async_gen, import_string as import_string, internalcode as internalcode, missing as missing
from typing import Any, Optional

def get_spontaneous_environment(cls, *args: Any): ...
def create_cache(size: Any): ...
def copy_cache(cache: Any): ...
def load_extensions(environment: Any, extensions: Any): ...
def fail_for_missing_callable(string: Any, name: Any) -> None: ...

class Environment:
    sandboxed: bool = ...
    overlayed: bool = ...
    linked_to: Any = ...
    shared: bool = ...
    code_generator_class: Any = ...
    context_class: Any = ...
    block_start_string: Any = ...
    block_end_string: Any = ...
    variable_start_string: Any = ...
    variable_end_string: Any = ...
    comment_start_string: Any = ...
    comment_end_string: Any = ...
    line_statement_prefix: Any = ...
    line_comment_prefix: Any = ...
    trim_blocks: Any = ...
    lstrip_blocks: Any = ...
    newline_sequence: Any = ...
    keep_trailing_newline: Any = ...
    undefined: Any = ...
    optimized: Any = ...
    finalize: Any = ...
    autoescape: Any = ...
    filters: Any = ...
    tests: Any = ...
    globals: Any = ...
    loader: Any = ...
    cache: Any = ...
    bytecode_cache: Any = ...
    auto_reload: Any = ...
    policies: Any = ...
    extensions: Any = ...
    enable_async: Any = ...
    is_async: Any = ...
    def __init__(self, block_start_string: Any = ..., block_end_string: Any = ..., variable_start_string: Any = ..., variable_end_string: Any = ..., comment_start_string: Any = ..., comment_end_string: Any = ..., line_statement_prefix: Any = ..., line_comment_prefix: Any = ..., trim_blocks: Any = ..., lstrip_blocks: Any = ..., newline_sequence: Any = ..., keep_trailing_newline: Any = ..., extensions: Any = ..., optimized: bool = ..., undefined: Any = ..., finalize: Optional[Any] = ..., autoescape: bool = ..., loader: Optional[Any] = ..., cache_size: int = ..., auto_reload: bool = ..., bytecode_cache: Optional[Any] = ..., enable_async: bool = ...) -> None: ...
    def add_extension(self, extension: Any) -> None: ...
    def extend(self, **attributes: Any) -> None: ...
    def overlay(self, block_start_string: Any = ..., block_end_string: Any = ..., variable_start_string: Any = ..., variable_end_string: Any = ..., comment_start_string: Any = ..., comment_end_string: Any = ..., line_statement_prefix: Any = ..., line_comment_prefix: Any = ..., trim_blocks: Any = ..., lstrip_blocks: Any = ..., extensions: Any = ..., optimized: Any = ..., undefined: Any = ..., finalize: Any = ..., autoescape: Any = ..., loader: Any = ..., cache_size: Any = ..., auto_reload: Any = ..., bytecode_cache: Any = ...): ...
    lexer: Any = ...
    def iter_extensions(self): ...
    def getitem(self, obj: Any, argument: Any): ...
    def getattr(self, obj: Any, attribute: Any): ...
    def call_filter(self, name: Any, value: Any, args: Optional[Any] = ..., kwargs: Optional[Any] = ..., context: Optional[Any] = ..., eval_ctx: Optional[Any] = ...): ...
    def call_test(self, name: Any, value: Any, args: Optional[Any] = ..., kwargs: Optional[Any] = ...): ...
    def parse(self, source: Any, name: Optional[Any] = ..., filename: Optional[Any] = ...): ...
    def lex(self, source: Any, name: Optional[Any] = ..., filename: Optional[Any] = ...): ...
    def preprocess(self, source: Any, name: Optional[Any] = ..., filename: Optional[Any] = ...): ...
    def compile(self, source: Any, name: Optional[Any] = ..., filename: Optional[Any] = ..., raw: bool = ..., defer_init: bool = ...): ...
    def compile_expression(self, source: Any, undefined_to_none: bool = ...): ...
    def compile_templates(self, target: Any, extensions: Optional[Any] = ..., filter_func: Optional[Any] = ..., zip: str = ..., log_function: Optional[Any] = ..., ignore_errors: bool = ..., py_compile: bool = ...) -> None: ...
    def list_templates(self, extensions: Optional[Any] = ..., filter_func: Optional[Any] = ...): ...
    def handle_exception(self, source: Optional[Any] = ...) -> None: ...
    def join_path(self, template: Any, parent: Any): ...
    def get_template(self, name: Any, parent: Optional[Any] = ..., globals: Optional[Any] = ...): ...
    def select_template(self, names: Any, parent: Optional[Any] = ..., globals: Optional[Any] = ...): ...
    def get_or_select_template(self, template_name_or_list: Any, parent: Optional[Any] = ..., globals: Optional[Any] = ...): ...
    def from_string(self, source: Any, globals: Optional[Any] = ..., template_class: Optional[Any] = ...): ...
    def make_globals(self, d: Any): ...

class Template:
    environment_class: Any = ...
    def __new__(cls, source: Any, block_start_string: Any = ..., block_end_string: Any = ..., variable_start_string: Any = ..., variable_end_string: Any = ..., comment_start_string: Any = ..., comment_end_string: Any = ..., line_statement_prefix: Any = ..., line_comment_prefix: Any = ..., trim_blocks: Any = ..., lstrip_blocks: Any = ..., newline_sequence: Any = ..., keep_trailing_newline: Any = ..., extensions: Any = ..., optimized: bool = ..., undefined: Any = ..., finalize: Optional[Any] = ..., autoescape: bool = ..., enable_async: bool = ...): ...
    @classmethod
    def from_code(cls, environment: Any, code: Any, globals: Any, uptodate: Optional[Any] = ...): ...
    @classmethod
    def from_module_dict(cls, environment: Any, module_dict: Any, globals: Any): ...
    def render(self, *args: Any, **kwargs: Any): ...
    def render_async(self, *args: Any, **kwargs: Any) -> None: ...
    def stream(self, *args: Any, **kwargs: Any): ...
    def generate(self, *args: Any, **kwargs: Any) -> None: ...
    def generate_async(self, *args: Any, **kwargs: Any) -> None: ...
    def new_context(self, vars: Optional[Any] = ..., shared: bool = ..., locals: Optional[Any] = ...): ...
    def make_module(self, vars: Optional[Any] = ..., shared: bool = ..., locals: Optional[Any] = ...): ...
    def make_module_async(self, vars: Optional[Any] = ..., shared: bool = ..., locals: Optional[Any] = ...) -> None: ...
    @property
    def module(self): ...
    def get_corresponding_lineno(self, lineno: Any): ...
    @property
    def is_up_to_date(self): ...
    @property
    def debug_info(self): ...

class TemplateModule:
    __name__: Any = ...
    def __init__(self, template: Any, context: Any, body_stream: Optional[Any] = ...) -> None: ...
    def __html__(self): ...

class TemplateExpression:
    def __init__(self, template: Any, undefined_to_none: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class TemplateStream:
    def __init__(self, gen: Any) -> None: ...
    def dump(self, fp: Any, encoding: Optional[Any] = ..., errors: str = ...) -> None: ...
    buffered: bool = ...
    def disable_buffering(self) -> None: ...
    def enable_buffering(self, size: int = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
