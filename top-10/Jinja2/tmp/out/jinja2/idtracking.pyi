from ._compat import iteritems as iteritems
from .visitor import NodeVisitor as NodeVisitor
from typing import Any, Optional

VAR_LOAD_PARAMETER: str
VAR_LOAD_RESOLVE: str
VAR_LOAD_ALIAS: str
VAR_LOAD_UNDEFINED: str

def find_symbols(nodes: Any, parent_symbols: Optional[Any] = ...): ...
def symbols_for_node(node: Any, parent_symbols: Optional[Any] = ...): ...

class Symbols:
    level: Any = ...
    parent: Any = ...
    refs: Any = ...
    loads: Any = ...
    stores: Any = ...
    def __init__(self, parent: Optional[Any] = ..., level: Optional[Any] = ...) -> None: ...
    def analyze_node(self, node: Any, **kwargs: Any) -> None: ...
    def find_load(self, target: Any): ...
    def find_ref(self, name: Any): ...
    def ref(self, name: Any): ...
    def copy(self): ...
    def store(self, name: Any) -> None: ...
    def declare_parameter(self, name: Any): ...
    def load(self, name: Any) -> None: ...
    def branch_update(self, branch_symbols: Any) -> None: ...
    def dump_stores(self): ...
    def dump_param_targets(self): ...

class RootVisitor(NodeVisitor):
    sym_visitor: Any = ...
    def __init__(self, symbols: Any) -> None: ...
    visit_Template: Any = ...
    visit_Block: Any = ...
    visit_Macro: Any = ...
    visit_FilterBlock: Any = ...
    visit_Scope: Any = ...
    visit_If: Any = ...
    visit_ScopedEvalContextModifier: Any = ...
    def visit_AssignBlock(self, node: Any, **kwargs: Any) -> None: ...
    def visit_CallBlock(self, node: Any, **kwargs: Any) -> None: ...
    def visit_OverlayScope(self, node: Any, **kwargs: Any) -> None: ...
    def visit_For(self, node: Any, for_branch: str = ..., **kwargs: Any) -> None: ...
    def visit_With(self, node: Any, **kwargs: Any) -> None: ...
    def generic_visit(self, node: Any, *args: Any, **kwargs: Any) -> None: ...

class FrameSymbolVisitor(NodeVisitor):
    symbols: Any = ...
    def __init__(self, symbols: Any) -> None: ...
    def visit_Name(self, node: Any, store_as_param: bool = ..., **kwargs: Any) -> None: ...
    def visit_NSRef(self, node: Any, **kwargs: Any) -> None: ...
    def visit_If(self, node: Any, **kwargs: Any): ...
    def visit_Macro(self, node: Any, **kwargs: Any) -> None: ...
    def visit_Import(self, node: Any, **kwargs: Any) -> None: ...
    def visit_FromImport(self, node: Any, **kwargs: Any) -> None: ...
    def visit_Assign(self, node: Any, **kwargs: Any) -> None: ...
    def visit_For(self, node: Any, **kwargs: Any) -> None: ...
    def visit_CallBlock(self, node: Any, **kwargs: Any) -> None: ...
    def visit_FilterBlock(self, node: Any, **kwargs: Any) -> None: ...
    def visit_With(self, node: Any, **kwargs: Any) -> None: ...
    def visit_AssignBlock(self, node: Any, **kwargs: Any) -> None: ...
    def visit_Scope(self, node: Any, **kwargs: Any) -> None: ...
    def visit_Block(self, node: Any, **kwargs: Any) -> None: ...
    def visit_OverlayScope(self, node: Any, **kwargs: Any) -> None: ...
