from ._compat import abc as abc, string_types as string_types, text_type as text_type, url_quote as url_quote
from typing import Any, Optional

missing: Any
internal_code: Any
concat: Any

def contextfunction(f: Any): ...
def evalcontextfunction(f: Any): ...
def environmentfunction(f: Any): ...
def internalcode(f: Any): ...
def is_undefined(obj: Any): ...
def consume(iterable: Any) -> None: ...
def clear_caches() -> None: ...
def import_string(import_name: Any, silent: bool = ...): ...
def open_if_exists(filename: Any, mode: str = ...): ...
def object_type_repr(obj: Any): ...
def pformat(obj: Any, verbose: bool = ...): ...
def urlize(text: Any, trim_url_limit: Optional[Any] = ..., rel: Optional[Any] = ..., target: Optional[Any] = ...): ...
def generate_lorem_ipsum(n: int = ..., html: bool = ..., min: int = ..., max: int = ...): ...
def unicode_urlencode(obj: Any, charset: str = ..., for_qs: bool = ...): ...

class LRUCache:
    capacity: Any = ...
    def __init__(self, capacity: Any) -> None: ...
    def __getnewargs__(self): ...
    def copy(self): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def setdefault(self, key: Any, default: Optional[Any] = ...): ...
    def clear(self) -> None: ...
    def __contains__(self, key: Any): ...
    def __len__(self): ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def items(self): ...
    def iteritems(self): ...
    def values(self): ...
    def itervalue(self): ...
    def itervalues(self): ...
    def keys(self): ...
    def iterkeys(self): ...
    def __iter__(self) -> Any: ...
    def __reversed__(self): ...
    __copy__: Any = ...

def select_autoescape(enabled_extensions: Any = ..., disabled_extensions: Any = ..., default_for_string: bool = ..., default: bool = ...): ...
def htmlsafe_json_dumps(obj: Any, dumper: Optional[Any] = ..., **kwargs: Any): ...

class Cycler:
    items: Any = ...
    pos: int = ...
    def __init__(self, *items: Any) -> None: ...
    def reset(self) -> None: ...
    @property
    def current(self): ...
    def next(self): ...
    __next__: Any = ...

class Joiner:
    sep: Any = ...
    used: bool = ...
    def __init__(self, sep: str = ...) -> None: ...
    def __call__(self): ...

class Namespace:
    def __init__(*args: Any, **kwargs: Any) -> None: ...
    def __getattribute__(self, name: Any): ...
    def __setitem__(self, name: Any, value: Any) -> None: ...

have_async_gen: bool

def soft_unicode(s: Any): ...
