from ._compat import BytesIO as BytesIO, marshal_dump as marshal_dump, marshal_load as marshal_load, pickle as pickle, text_type as text_type
from .utils import open_if_exists as open_if_exists
from typing import Any, Optional

bc_version: int
bc_magic: Any

class Bucket:
    environment: Any = ...
    key: Any = ...
    checksum: Any = ...
    def __init__(self, environment: Any, key: Any, checksum: Any) -> None: ...
    code: Any = ...
    def reset(self) -> None: ...
    def load_bytecode(self, f: Any) -> None: ...
    def write_bytecode(self, f: Any) -> None: ...
    def bytecode_from_string(self, string: Any) -> None: ...
    def bytecode_to_string(self): ...

class BytecodeCache:
    def load_bytecode(self, bucket: Any) -> None: ...
    def dump_bytecode(self, bucket: Any) -> None: ...
    def clear(self) -> None: ...
    def get_cache_key(self, name: Any, filename: Optional[Any] = ...): ...
    def get_source_checksum(self, source: Any): ...
    def get_bucket(self, environment: Any, name: Any, filename: Any, source: Any): ...
    def set_bucket(self, bucket: Any) -> None: ...

class FileSystemBytecodeCache(BytecodeCache):
    directory: Any = ...
    pattern: Any = ...
    def __init__(self, directory: Optional[Any] = ..., pattern: str = ...) -> None: ...
    def load_bytecode(self, bucket: Any) -> None: ...
    def dump_bytecode(self, bucket: Any) -> None: ...
    def clear(self) -> None: ...

class MemcachedBytecodeCache(BytecodeCache):
    client: Any = ...
    prefix: Any = ...
    timeout: Any = ...
    ignore_memcache_errors: Any = ...
    def __init__(self, client: Any, prefix: str = ..., timeout: Optional[Any] = ..., ignore_memcache_errors: bool = ...) -> None: ...
    def load_bytecode(self, bucket: Any) -> None: ...
    def dump_bytecode(self, bucket: Any) -> None: ...
