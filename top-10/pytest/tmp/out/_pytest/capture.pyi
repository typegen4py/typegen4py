import io
from _pytest.compat import final as final
from _pytest.config import Config as Config, hookimpl as hookimpl
from _pytest.config.argparsing import Parser as Parser
from _pytest.deprecated import check_ispytest as check_ispytest
from _pytest.fixtures import SubRequest as SubRequest, fixture as fixture
from _pytest.nodes import Collector as Collector, File as File, Item as Item
from typing import Any, AnyStr, Generator, Iterator, TextIO, Tuple, Union

def pytest_addoption(parser: Parser) -> None: ...
def pytest_load_initial_conftests(early_config: Config) -> Any: ...

class EncodedFile(io.TextIOWrapper):
    @property
    def name(self) -> str: ...
    @property
    def mode(self) -> str: ...

class CaptureIO(io.TextIOWrapper):
    def __init__(self) -> None: ...
    def getvalue(self) -> str: ...

class TeeCaptureIO(CaptureIO):
    def __init__(self, other: TextIO) -> None: ...
    def write(self, s: str) -> int: ...

class DontReadFromInput:
    encoding: Any = ...
    def read(self, *args: Any) -> None: ...
    readline: Any = ...
    readlines: Any = ...
    __next__: Any = ...
    def __iter__(self) -> Any: ...
    def fileno(self) -> int: ...
    def isatty(self) -> bool: ...
    def close(self) -> None: ...
    @property
    def buffer(self): ...

patchsysdict: Any

class NoCapture:
    EMPTY_BUFFER: Any = ...
    __init__: Any = ...
    start: Any = ...
    done: Any = ...
    suspend: Any = ...
    resume: Any = ...

class SysCaptureBinary:
    EMPTY_BUFFER: bytes = ...
    name: Any = ...
    tmpfile: Any = ...
    def __init__(self, fd: int, tmpfile: Any=..., *, tee: bool=...) -> None: ...
    def repr(self, class_name: str) -> str: ...
    def start(self) -> None: ...
    def snap(self): ...
    def done(self) -> None: ...
    def suspend(self) -> None: ...
    def resume(self) -> None: ...
    def writeorg(self, data: Any) -> None: ...

class SysCapture(SysCaptureBinary):
    EMPTY_BUFFER: str = ...
    def snap(self): ...
    def writeorg(self, data: Any) -> None: ...

class FDCaptureBinary:
    EMPTY_BUFFER: bytes = ...
    targetfd: Any = ...
    targetfd_invalid: Any = ...
    targetfd_save: Any = ...
    tmpfile: Any = ...
    syscapture: Any = ...
    def __init__(self, targetfd: int) -> None: ...
    def start(self) -> None: ...
    def snap(self): ...
    def done(self) -> None: ...
    def suspend(self) -> None: ...
    def resume(self) -> None: ...
    def writeorg(self, data: Any) -> None: ...

class FDCapture(FDCaptureBinary):
    EMPTY_BUFFER: str = ...
    def snap(self): ...
    def writeorg(self, data: Any) -> None: ...

class CaptureResult:
    out: Any = ...
    err: Any = ...
    def __init__(self, out: AnyStr, err: AnyStr) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[AnyStr]: ...
    def __getitem__(self, item: int) -> AnyStr: ...
    def count(self, value: AnyStr) -> int: ...
    def index(self, value: Any) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...

class MultiCapture:
    in_: Any = ...
    out: Any = ...
    err: Any = ...
    def __init__(self, in_: Any, out: Any, err: Any) -> None: ...
    def start_capturing(self) -> None: ...
    def pop_outerr_to_orig(self) -> Tuple[AnyStr, AnyStr]: ...
    def suspend_capturing(self, in_: bool=...) -> None: ...
    def resume_capturing(self) -> None: ...
    def stop_capturing(self) -> None: ...
    def is_started(self) -> bool: ...
    def readouterr(self) -> CaptureResult[AnyStr]: ...

class CaptureManager:
    def __init__(self, method: _CaptureMethod) -> None: ...
    def is_capturing(self) -> Union[str, bool]: ...
    def is_globally_capturing(self) -> bool: ...
    def start_global_capturing(self) -> None: ...
    def stop_global_capturing(self) -> None: ...
    def resume_global_capture(self) -> None: ...
    def suspend_global_capture(self, in_: bool=...) -> None: ...
    def suspend(self, in_: bool=...) -> None: ...
    def resume(self) -> None: ...
    def read_global_capture(self) -> CaptureResult[str]: ...
    def set_fixture(self, capture_fixture: CaptureFixture[Any]) -> None: ...
    def unset_fixture(self) -> None: ...
    def activate_fixture(self) -> None: ...
    def deactivate_fixture(self) -> None: ...
    def suspend_fixture(self) -> None: ...
    def resume_fixture(self) -> None: ...
    def global_and_fixture_disabled(self) -> Generator[None, None, None]: ...
    def item_capture(self, when: str, item: Item) -> Generator[None, None, None]: ...
    def pytest_make_collect_report(self, collector: Collector) -> Any: ...
    def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]: ...
    def pytest_runtest_call(self, item: Item) -> Generator[None, None, None]: ...
    def pytest_runtest_teardown(self, item: Item) -> Generator[None, None, None]: ...
    def pytest_keyboard_interrupt(self) -> None: ...
    def pytest_internalerror(self) -> None: ...

class CaptureFixture:
    captureclass: Any = ...
    request: Any = ...
    def __init__(self, captureclass: Any, request: SubRequest, *, _ispytest: bool=...) -> None: ...
    def close(self) -> None: ...
    def readouterr(self) -> CaptureResult[AnyStr]: ...
    def disabled(self) -> Generator[None, None, None]: ...

def capsys(request: SubRequest) -> Generator[CaptureFixture[str], None, None]: ...
def capsysbinary(request: SubRequest) -> Generator[CaptureFixture[bytes], None, None]: ...
def capfd(request: SubRequest) -> Generator[CaptureFixture[str], None, None]: ...
def capfdbinary(request: SubRequest) -> Generator[CaptureFixture[bytes], None, None]: ...
