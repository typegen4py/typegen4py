import unittest
from _pytest.compat import getimfunc as getimfunc, is_async_function as is_async_function
from _pytest.config import hookimpl as hookimpl
from _pytest.fixtures import FixtureRequest as FixtureRequest
from _pytest.nodes import Collector as Collector, Item as Item
from _pytest.outcomes import exit as exit, fail as fail, skip as skip, xfail as xfail
from _pytest.python import Class as Class, Function as Function, PyCollector as PyCollector
from _pytest.runner import CallInfo as CallInfo
from _pytest.skipping import skipped_by_mark_key as skipped_by_mark_key, unexpectedsuccess_key as unexpectedsuccess_key
from typing import Generator, Iterable, List, Optional, Union

def pytest_pycollect_makeitem(collector: PyCollector, name: str, obj: object) -> Optional[UnitTestCase]: ...

class UnitTestCase(Class):
    nofuncargs: bool = ...
    def collect(self) -> Iterable[Union[Item, Collector]]: ...

class TestCaseFunction(Function):
    nofuncargs: bool = ...
    def setup(self) -> None: ...
    def teardown(self) -> None: ...
    def startTest(self, testcase: unittest.TestCase) -> None: ...
    def addError(self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType) -> None: ...
    def addFailure(self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType) -> None: ...
    def addSkip(self, testcase: unittest.TestCase, reason: str) -> None: ...
    def addExpectedFailure(self, testcase: unittest.TestCase, rawexcinfo: _SysExcInfoType, reason: str=...) -> None: ...
    def addUnexpectedSuccess(self, testcase: unittest.TestCase, reason: str=...) -> None: ...
    def addSuccess(self, testcase: unittest.TestCase) -> None: ...
    def stopTest(self, testcase: unittest.TestCase) -> None: ...
    def runtest(self) -> None: ...

def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> None: ...
def pytest_runtest_protocol(item: Item) -> Generator[None, None, None]: ...
def check_testcase_implements_trial_reporter(done: List[int]=...) -> None: ...
