import xml.etree.ElementTree as ET
from _pytest import nodes as nodes, timing as timing
from _pytest._code.code import ExceptionRepr as ExceptionRepr, ReprFileLocation as ReprFileLocation
from _pytest.config import Config as Config, filename_arg as filename_arg
from _pytest.config.argparsing import Parser as Parser
from _pytest.fixtures import FixtureRequest as FixtureRequest
from _pytest.reports import TestReport as TestReport
from _pytest.store import StoreKey as StoreKey
from _pytest.terminal import TerminalReporter as TerminalReporter
from typing import Any, Callable, List, Optional, Union

xml_key: Any

def bin_xml_escape(arg: object) -> str: ...
def merge_family(left: Any, right: Any) -> None: ...

families: Any

class _NodeReporter:
    id: Any = ...
    xml: Any = ...
    add_stats: Any = ...
    family: Any = ...
    duration: int = ...
    properties: Any = ...
    nodes: Any = ...
    attrs: Any = ...
    def __init__(self, nodeid: Union[str, TestReport], xml: LogXML) -> None: ...
    def append(self, node: ET.Element) -> None: ...
    def add_property(self, name: str, value: object) -> None: ...
    def add_attribute(self, name: str, value: object) -> None: ...
    def make_properties_node(self) -> Optional[ET.Element]: ...
    def record_testreport(self, testreport: TestReport) -> None: ...
    def to_xml(self) -> ET.Element: ...
    def write_captured_output(self, report: TestReport) -> None: ...
    def append_pass(self, report: TestReport) -> None: ...
    def append_failure(self, report: TestReport) -> None: ...
    def append_collect_error(self, report: TestReport) -> None: ...
    def append_collect_skipped(self, report: TestReport) -> None: ...
    def append_error(self, report: TestReport) -> None: ...
    def append_skipped(self, report: TestReport) -> None: ...
    def finalize(self) -> None: ...

def record_property(request: FixtureRequest) -> Callable[[str, object], None]: ...
def record_xml_attribute(request: FixtureRequest) -> Callable[[str, object], None]: ...
def record_testsuite_property(request: FixtureRequest) -> Callable[[str, object], None]: ...
def pytest_addoption(parser: Parser) -> None: ...
def pytest_configure(config: Config) -> None: ...
def pytest_unconfigure(config: Config) -> None: ...
def mangle_test_address(address: str) -> List[str]: ...

class LogXML:
    logfile: Any = ...
    prefix: Any = ...
    suite_name: Any = ...
    logging: Any = ...
    log_passing_tests: Any = ...
    report_duration: Any = ...
    family: Any = ...
    stats: Any = ...
    node_reporters: Any = ...
    node_reporters_ordered: Any = ...
    global_properties: Any = ...
    open_reports: Any = ...
    cnt_double_fail_tests: int = ...
    def __init__(self, logfile: Any, prefix: Optional[str], suite_name: str=..., logging: str=..., report_duration: str=..., family: Any=..., log_passing_tests: bool=...) -> None: ...
    def finalize(self, report: TestReport) -> None: ...
    def node_reporter(self, report: Union[TestReport, str]) -> _NodeReporter: ...
    def add_stats(self, key: str) -> None: ...
    def pytest_runtest_logreport(self, report: TestReport) -> None: ...
    def update_testcase_duration(self, report: TestReport) -> None: ...
    def pytest_collectreport(self, report: TestReport) -> None: ...
    def pytest_internalerror(self, excrepr: ExceptionRepr) -> None: ...
    suite_start_time: Any = ...
    def pytest_sessionstart(self) -> None: ...
    def pytest_sessionfinish(self) -> None: ...
    def pytest_terminal_summary(self, terminalreporter: TerminalReporter) -> None: ...
    def add_global_property(self, name: str, value: object) -> None: ...
