import ast
import importlib.util
import types
from _pytest._io.saferepr import saferepr as saferepr
from _pytest._version import version as version
from _pytest.assertion import AssertionState as AssertionState, util as util
from _pytest.config import Config as Config
from _pytest.main import Session as Session
from _pytest.pathlib import fnmatch_ex as fnmatch_ex
from _pytest.store import StoreKey as StoreKey
from pathlib import Path
from typing import Any, List, Optional, Sequence, Tuple, Union

assertstate_key: Any
PYTEST_TAG: Any
PYC_EXT: Any
PYC_TAIL: Any

class AssertionRewritingHook(importlib.abc.MetaPathFinder, importlib.abc.Loader):
    config: Any = ...
    fnpats: Any = ...
    session: Any = ...
    def __init__(self, config: Config) -> None: ...
    def set_session(self, session: Optional[Session]) -> None: ...
    def find_spec(self, name: str, path: Optional[Sequence[Union[str, bytes]]]=..., target: Optional[types.ModuleType]=...) -> Optional[importlib.machinery.ModuleSpec]: ...
    def create_module(self, spec: importlib.machinery.ModuleSpec) -> Optional[types.ModuleType]: ...
    def exec_module(self, module: types.ModuleType) -> None: ...
    def mark_rewrite(self, *names: str) -> None: ...
    def get_data(self, pathname: Union[str, bytes]) -> bytes: ...

def rewrite_asserts(mod: ast.Module, source: bytes, module_path: Optional[str]=..., config: Optional[Config]=...) -> None: ...

UNARY_MAP: Any
BINOP_MAP: Any

def set_location(node: Any, lineno: Any, col_offset: Any): ...

class AssertionRewriter(ast.NodeVisitor):
    module_path: Any = ...
    config: Any = ...
    enable_assertion_pass_hook: Any = ...
    source: Any = ...
    def __init__(self, module_path: Optional[str], config: Optional[Config], source: bytes) -> None: ...
    def run(self, mod: ast.Module) -> None: ...
    @staticmethod
    def is_rewrite_disabled(docstring: str) -> bool: ...
    def variable(self) -> str: ...
    def assign(self, expr: ast.expr) -> ast.Name: ...
    def display(self, expr: ast.expr) -> ast.expr: ...
    def helper(self, name: str, *args: ast.expr) -> ast.expr: ...
    def builtin(self, name: str) -> ast.Attribute: ...
    def explanation_param(self, expr: ast.expr) -> str: ...
    explanation_specifiers: Any = ...
    def push_format_context(self) -> None: ...
    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name: ...
    def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]: ...
    statements: Any = ...
    variables: Any = ...
    variable_counter: Any = ...
    format_variables: Any = ...
    stack: Any = ...
    expl_stmts: Any = ...
    def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]: ...
    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]: ...
    def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]: ...
    def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]: ...
    def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]: ...
    def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]: ...
    def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]: ...
    def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]: ...
    def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]: ...

def try_makedirs(cache_dir: Path) -> bool: ...
def get_cache_dir(file_path: Path) -> Path: ...
