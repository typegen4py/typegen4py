from _pytest.assertion import rewrite as rewrite, truncate as truncate, util as util
from _pytest.assertion.rewrite import assertstate_key as assertstate_key
from _pytest.config import Config as Config, hookimpl as hookimpl
from _pytest.config.argparsing import Parser as Parser
from _pytest.main import Session as Session
from _pytest.nodes import Item as Item
from typing import Any, Generator, List, Optional

def pytest_addoption(parser: Parser) -> None: ...
def register_assert_rewrite(*names: str) -> None: ...

class DummyRewriteHook:
    def mark_rewrite(self, *names: str) -> None: ...

class AssertionState:
    mode: Any = ...
    trace: Any = ...
    hook: Any = ...
    def __init__(self, config: Config, mode: Any) -> None: ...

def install_importhook(config: Config) -> rewrite.AssertionRewritingHook: ...
def pytest_collection(session: Session) -> None: ...
def pytest_runtest_protocol(item: Item) -> Generator[None, None, None]: ...
def pytest_sessionfinish(session: Session) -> None: ...
def pytest_assertrepr_compare(config: Config, op: str, left: Any, right: Any) -> Optional[List[str]]: ...
