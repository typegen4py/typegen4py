import py
from .pathlib import resolve_from_str as resolve_from_str, rm_rf as rm_rf
from .reports import CollectReport as CollectReport
from _pytest import nodes as nodes
from _pytest._io import TerminalWriter as TerminalWriter
from _pytest.compat import final as final
from _pytest.config import Config as Config, ExitCode as ExitCode, hookimpl as hookimpl
from _pytest.config.argparsing import Parser as Parser
from _pytest.deprecated import check_ispytest as check_ispytest
from _pytest.fixtures import FixtureRequest as FixtureRequest, fixture as fixture
from _pytest.main import Session as Session
from _pytest.python import Module as Module, Package as Package
from _pytest.reports import TestReport as TestReport
from pathlib import Path
from typing import Any, Generator, List, Optional, Set, Union

README_CONTENT: str
CACHEDIR_TAG_CONTENT: bytes

class Cache:
    def __init__(self, cachedir: Path, config: Config, *, _ispytest: bool=...) -> None: ...
    @classmethod
    def for_config(cls: Any, config: Config, *, _ispytest: bool=...) -> Cache: ...
    @classmethod
    def clear_cache(cls: Any, cachedir: Path, _ispytest: bool=...) -> None: ...
    @staticmethod
    def cache_dir_from_config(config: Config, *, _ispytest: bool=...) -> Path: ...
    def warn(self, fmt: str, *, _ispytest: bool=..., **args: object) -> None: ...
    def makedir(self, name: str) -> py.path.local: ...
    def get(self, key: str, default: Any) -> Any: ...
    def set(self, key: str, value: object) -> None: ...
    def __init__(self, cachedir: Any, config: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class LFPluginCollWrapper:
    lfplugin: Any = ...
    def __init__(self, lfplugin: LFPlugin) -> None: ...
    def pytest_make_collect_report(self, collector: nodes.Collector) -> Any: ...

class LFPluginCollSkipfiles:
    lfplugin: Any = ...
    def __init__(self, lfplugin: LFPlugin) -> None: ...
    def pytest_make_collect_report(self, collector: nodes.Collector) -> Optional[CollectReport]: ...

class LFPlugin:
    config: Any = ...
    active: Any = ...
    lastfailed: Any = ...
    def __init__(self, config: Config) -> None: ...
    def get_last_failed_paths(self) -> Set[Path]: ...
    def pytest_report_collectionfinish(self) -> Optional[str]: ...
    def pytest_runtest_logreport(self, report: TestReport) -> None: ...
    def pytest_collectreport(self, report: CollectReport) -> None: ...
    def pytest_collection_modifyitems(self, config: Config, items: List[nodes.Item]) -> Generator[None, None, None]: ...
    def pytest_sessionfinish(self, session: Session) -> None: ...

class NFPlugin:
    config: Any = ...
    active: Any = ...
    cached_nodeids: Any = ...
    def __init__(self, config: Config) -> None: ...
    def pytest_collection_modifyitems(self, items: List[nodes.Item]) -> Generator[None, None, None]: ...
    def pytest_sessionfinish(self) -> None: ...

def pytest_addoption(parser: Parser) -> None: ...
def pytest_cmdline_main(config: Config) -> Optional[Union[int, ExitCode]]: ...
def pytest_configure(config: Config) -> None: ...
def cache(request: FixtureRequest) -> Cache: ...
def pytest_report_header(config: Config) -> Optional[str]: ...
def cacheshow(config: Config, session: Session) -> int: ...
