import _pytest.hookspec
import argparse
import enum
import py
import types
from .argparsing import Argument as Argument
from .findpaths import determine_setup as determine_setup
from _pytest._code import ExceptionInfo as ExceptionInfo, filter_traceback as filter_traceback
from _pytest._io import TerminalWriter as TerminalWriter
from _pytest.compat import final as final, importlib_metadata as importlib_metadata
from _pytest.outcomes import Skipped as Skipped, fail as fail
from _pytest.pathlib import ImportMode as ImportMode, bestrelpath as bestrelpath, import_path as import_path
from _pytest.store import Store as Store
from _pytest.terminal import TerminalReporter as TerminalReporter
from _pytest.warning_types import PytestConfigWarning as PytestConfigWarning
from pathlib import Path
from pluggy import PluginManager
from types import TracebackType
from typing import Any, Callable, Generator, Iterable, List, Optional, Sequence, TextIO, Tuple, Type, Union

hookimpl: Any
hookspec: Any

class ExitCode(enum.IntEnum):
    OK: int = ...
    TESTS_FAILED: int = ...
    INTERRUPTED: int = ...
    INTERNAL_ERROR: int = ...
    USAGE_ERROR: int = ...
    NO_TESTS_COLLECTED: int = ...

class ConftestImportFailure(Exception):
    path: Any = ...
    excinfo: Any = ...
    def __init__(self, path: py.path.local, excinfo: Tuple[Type[Exception], Exception, TracebackType]) -> None: ...

def filter_traceback_for_conftest_import_failure(entry: _pytest._code.TracebackEntry) -> bool: ...
def main(args: Optional[Union[List[str], py.path.local]]=..., plugins: Optional[Sequence[Union[str, _PluggyPlugin]]]=...) -> Union[int, ExitCode]: ...
def console_main() -> int: ...

class cmdline:
    main: Any = ...

def filename_arg(path: str, optname: str) -> str: ...
def directory_arg(path: str, optname: str) -> str: ...

essential_plugins: Any
default_plugins: Any
builtin_plugins: Any

def get_config(args: Optional[List[str]]=..., plugins: Optional[Sequence[Union[str, _PluggyPlugin]]]=...) -> Config: ...
def get_plugin_manager() -> PytestPluginManager: ...

class PytestPluginManager(PluginManager):
    skipped_plugins: Any = ...
    rewrite_hook: Any = ...
    def __init__(self) -> None: ...
    def parse_hookimpl_opts(self, plugin: _PluggyPlugin, name: str) -> Any: ...
    def parse_hookspec_opts(self, module_or_class: Any, name: str) -> Any: ...
    def register(self, plugin: _PluggyPlugin, name: Optional[str]=...) -> Optional[str]: ...
    def getplugin(self, name: str) -> Any: ...
    def hasplugin(self, name: str) -> bool: ...
    def pytest_configure(self, config: Config) -> None: ...
    def consider_preparse(self, args: Sequence[str], *, exclude_only: bool=...) -> None: ...
    def consider_pluginarg(self, arg: str) -> None: ...
    def consider_conftest(self, conftestmodule: types.ModuleType) -> None: ...
    def consider_env(self) -> None: ...
    def consider_module(self, mod: types.ModuleType) -> None: ...
    def import_plugin(self, modname: str, consider_entry_points: bool=...) -> None: ...

class Notset: ...

notset: Any

class Config:
    class InvocationParams:
        args: Any = ...
        plugins: Any = ...
        dir: Any = ...
        def __init__(self, args: Any, plugins: Any, dir: Any) -> None: ...
        def __lt__(self, other: Any) -> Any: ...
        def __le__(self, other: Any) -> Any: ...
        def __gt__(self, other: Any) -> Any: ...
        def __ge__(self, other: Any) -> Any: ...
    option: Any = ...
    invocation_params: Any = ...
    pluginmanager: Any = ...
    trace: Any = ...
    hook: Any = ...
    cache: Any = ...
    def __init__(self, pluginmanager: PytestPluginManager, *, invocation_params: Optional[InvocationParams]=...) -> None: ...
    @property
    def invocation_dir(self) -> py.path.local: ...
    @property
    def rootpath(self) -> Path: ...
    @property
    def rootdir(self) -> py.path.local: ...
    @property
    def inipath(self) -> Optional[Path]: ...
    @property
    def inifile(self) -> Optional[py.path.local]: ...
    def add_cleanup(self, func: Callable[[], None]) -> None: ...
    def get_terminal_writer(self) -> TerminalWriter: ...
    def pytest_cmdline_parse(self, pluginmanager: PytestPluginManager, args: List[str]) -> Config: ...
    def notify_exception(self, excinfo: ExceptionInfo[BaseException], option: Optional[argparse.Namespace]=...) -> None: ...
    def cwd_relative_nodeid(self, nodeid: str) -> str: ...
    @classmethod
    def fromdictargs(cls: Any, option_dict: Any, args: Any) -> Config: ...
    def pytest_load_initial_conftests(self, early_config: Config) -> None: ...
    def pytest_collection(self) -> Generator[None, None, None]: ...
    args: Any = ...
    def parse(self, args: List[str], addopts: bool=...) -> None: ...
    def issue_config_time_warning(self, warning: Warning, stacklevel: int) -> None: ...
    def addinivalue_line(self, name: str, line: str) -> None: ...
    def getini(self, name: str) -> Any: ...
    def getoption(self, name: str, default: Any=..., skip: bool=...) -> Any: ...
    def getvalue(self, name: str, path: Any=...) -> Any: ...
    def getvalueorskip(self, name: str, path: Any=...) -> Any: ...

def create_terminal_writer(config: Config, file: Optional[TextIO]=...) -> TerminalWriter: ...
def parse_warning_filter(arg: str, escape: bool) -> Tuple[str, str, Type[Warning], str, int]: ...
def apply_warning_filters(config_filters: Iterable[str], cmdline_filters: Iterable[str]) -> None: ...
