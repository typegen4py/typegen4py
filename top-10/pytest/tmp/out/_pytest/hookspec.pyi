import pdb
import py.path
import warnings
from _pytest._code.code import ExceptionRepr as ExceptionRepr
from _pytest.code import ExceptionInfo as ExceptionInfo
from _pytest.config import Config as Config, ExitCode as ExitCode, PytestPluginManager as PytestPluginManager, _PluggyPlugin
from _pytest.config.argparsing import Parser as Parser
from _pytest.deprecated import WARNING_CAPTURED_HOOK as WARNING_CAPTURED_HOOK
from _pytest.fixtures import FixtureDef as FixtureDef, SubRequest as SubRequest
from _pytest.main import Session as Session
from _pytest.nodes import Collector as Collector, Item as Item
from _pytest.outcomes import Exit as Exit
from _pytest.python import Function as Function, Metafunc as Metafunc, Module as Module, PyCollector as PyCollector
from _pytest.reports import CollectReport as CollectReport, TestReport as TestReport
from _pytest.runner import CallInfo as CallInfo
from _pytest.terminal import TerminalReporter as TerminalReporter
from typing import Any, Dict, List, Mapping, Optional, Sequence, Tuple, Union
from typing_extensions import Literal as Literal

hookspec: Any

def pytest_addhooks(pluginmanager: PytestPluginManager) -> None: ...
def pytest_plugin_registered(plugin: _PluggyPlugin, manager: PytestPluginManager) -> None: ...
def pytest_addoption(parser: Parser, pluginmanager: PytestPluginManager) -> None: ...
def pytest_configure(config: Config) -> None: ...
def pytest_cmdline_parse(pluginmanager: PytestPluginManager, args: List[str]) -> Optional[Config]: ...
def pytest_cmdline_preparse(config: Config, args: List[str]) -> None: ...
def pytest_cmdline_main(config: Config) -> Optional[Union[ExitCode, int]]: ...
def pytest_load_initial_conftests(early_config: Config, parser: Parser, args: List[str]) -> None: ...
def pytest_collection(session: Session) -> Optional[object]: ...
def pytest_collection_modifyitems(session: Session, config: Config, items: List[Item]) -> None: ...
def pytest_collection_finish(session: Session) -> None: ...
def pytest_ignore_collect(path: py.path.local, config: Config) -> Optional[bool]: ...
def pytest_collect_file(path: py.path.local, parent: Collector) -> Optional[Collector]: ...
def pytest_collectstart(collector: Collector) -> None: ...
def pytest_itemcollected(item: Item) -> None: ...
def pytest_collectreport(report: CollectReport) -> None: ...
def pytest_deselected(items: Sequence[Item]) -> None: ...
def pytest_make_collect_report(collector: Collector) -> Optional[CollectReport]: ...
def pytest_pycollect_makemodule(path: py.path.local, parent: Any) -> Optional[Module]: ...
def pytest_pycollect_makeitem(collector: PyCollector, name: str, obj: object) -> Union[None, Item, Collector, List[Union[Item, Collector]]]: ...
def pytest_pyfunc_call(pyfuncitem: Function) -> Optional[object]: ...
def pytest_generate_tests(metafunc: Metafunc) -> None: ...
def pytest_make_parametrize_id(config: Config, val: object, argname: str) -> Optional[str]: ...
def pytest_runtestloop(session: Session) -> Optional[object]: ...
def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> Optional[object]: ...
def pytest_runtest_logstart(nodeid: str, location: Tuple[str, Optional[int], str]) -> None: ...
def pytest_runtest_logfinish(nodeid: str, location: Tuple[str, Optional[int], str]) -> None: ...
def pytest_runtest_setup(item: Item) -> None: ...
def pytest_runtest_call(item: Item) -> None: ...
def pytest_runtest_teardown(item: Item, nextitem: Optional[Item]) -> None: ...
def pytest_runtest_makereport(item: Item, call: CallInfo[None]) -> Optional[TestReport]: ...
def pytest_runtest_logreport(report: TestReport) -> None: ...
def pytest_report_to_serializable(config: Config, report: Union[CollectReport, TestReport]) -> Optional[Dict[str, Any]]: ...
def pytest_report_from_serializable(config: Config, data: Dict[str, Any]) -> Optional[Union[CollectReport, TestReport]]: ...
def pytest_fixture_setup(fixturedef: FixtureDef[Any], request: SubRequest) -> Optional[object]: ...
def pytest_fixture_post_finalizer(fixturedef: FixtureDef[Any], request: SubRequest) -> None: ...
def pytest_sessionstart(session: Session) -> None: ...
def pytest_sessionfinish(session: Session, exitstatus: Union[int, ExitCode]) -> None: ...
def pytest_unconfigure(config: Config) -> None: ...
def pytest_assertrepr_compare(config: Config, op: str, left: object, right: object) -> Optional[List[str]]: ...
def pytest_assertion_pass(item: Item, lineno: int, orig: str, expl: str) -> None: ...
def pytest_report_header(config: Config, startdir: py.path.local) -> Union[str, List[str]]: ...
def pytest_report_collectionfinish(config: Config, startdir: py.path.local, items: Sequence[Item]) -> Union[str, List[str]]: ...
def pytest_report_teststatus(report: Union[CollectReport, TestReport], config: Config) -> Tuple[str, str, Union[str, Mapping[str, bool]]]: ...
def pytest_terminal_summary(terminalreporter: TerminalReporter, exitstatus: ExitCode, config: Config) -> None: ...
def pytest_warning_captured(warning_message: warnings.WarningMessage, when: Literal[config, collect, runtest], item: Optional[Item], location: Optional[Tuple[str, int, str]]) -> None: ...
def pytest_warning_recorded(warning_message: warnings.WarningMessage, when: Literal[config, collect, runtest], nodeid: str, location: Optional[Tuple[str, int, str]]) -> None: ...
def pytest_markeval_namespace(config: Config) -> Dict[str, Any]: ...
def pytest_internalerror(excrepr: ExceptionRepr, excinfo: ExceptionInfo[BaseException]) -> Optional[bool]: ...
def pytest_keyboard_interrupt(excinfo: ExceptionInfo[Union[KeyboardInterrupt, Exit]]) -> None: ...
def pytest_exception_interact(node: Union[Item, Collector], call: CallInfo[Any], report: Union[CollectReport, TestReport]) -> None: ...
def pytest_enter_pdb(config: Config, pdb: pdb.Pdb) -> None: ...
def pytest_leave_pdb(config: Config, pdb: pdb.Pdb) -> None: ...
