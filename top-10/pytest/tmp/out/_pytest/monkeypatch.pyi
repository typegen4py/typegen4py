from _pytest.compat import final as final
from _pytest.fixtures import fixture as fixture
from _pytest.warning_types import PytestWarning as PytestWarning
from typing import Any, Generator, MutableMapping, Optional, Tuple, TypeVar, Union

RE_IMPORT_ERROR_NAME: Any
K = TypeVar('K')
V = TypeVar('V')

def monkeypatch() -> Generator[MonkeyPatch, None, None]: ...
def resolve(name: str) -> object: ...
def annotated_getattr(obj: object, name: str, ann: str) -> object: ...
def derive_importpath(import_path: str, raising: bool) -> Tuple[str, object]: ...

class Notset: ...

notset: Any

class MonkeyPatch:
    def __init__(self) -> None: ...
    @classmethod
    def context(cls: Any) -> Generator[MonkeyPatch, None, None]: ...
    def setattr(self, target: str, name: object, value: Notset=..., raising: bool=...) -> None: ...
    def setattr(self, target: object, name: str, value: object, raising: bool=...) -> None: ...
    def setattr(self, target: Union[str, object], name: Union[object, str], value: object=..., raising: bool=...) -> None: ...
    def delattr(self, target: Union[object, str], name: Union[str, Notset]=..., raising: bool=...) -> None: ...
    def setitem(self, dic: MutableMapping[K, V], name: K, value: V) -> None: ...
    def delitem(self, dic: MutableMapping[K, V], name: K, raising: bool=...) -> None: ...
    def setenv(self, name: str, value: str, prepend: Optional[str]=...) -> None: ...
    def delenv(self, name: str, raising: bool=...) -> None: ...
    def syspath_prepend(self, path: Any) -> None: ...
    def chdir(self, path: Any) -> None: ...
    def undo(self) -> None: ...
